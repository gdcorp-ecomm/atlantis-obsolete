//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.1.
// 
#pragma warning disable 1591

namespace Atlantis.Framework.IrisGetServiceMappings.Impl.IrisWS {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="IrisWebServiceSoap", Namespace="http://tempuri.org/")]
    public partial class IrisWebService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback CreateIncidentInIRISOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateIncidentInIRISByTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateIncidentInIRISByEmployeeOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateIncidentInIRISByPriorityOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateQuickIncidentinIRISOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetOfferingsListBySubscriberIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDashboardReportByGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetServiceGroupLookUpOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddIncidentNoteOperationCompleted;
        
        private System.Threading.SendOrPostCallback ResetStaticDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback QuickResolveIncidentOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdatePriorityOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllPrioritiesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPrioritiesByDocumentTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetVersionOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public IrisWebService() {
            this.Url = global::Atlantis.Framework.IrisGetServiceMappings.Impl.Properties.Settings.Default.Atlantis_Framework_IrisGetServiceMappings_Impl_IrisWS_IrisWebService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event CreateIncidentInIRISCompletedEventHandler CreateIncidentInIRISCompleted;
        
        /// <remarks/>
        public event CreateIncidentInIRISByTypeCompletedEventHandler CreateIncidentInIRISByTypeCompleted;
        
        /// <remarks/>
        public event CreateIncidentInIRISByEmployeeCompletedEventHandler CreateIncidentInIRISByEmployeeCompleted;
        
        /// <remarks/>
        public event CreateIncidentInIRISByPriorityCompletedEventHandler CreateIncidentInIRISByPriorityCompleted;
        
        /// <remarks/>
        public event CreateQuickIncidentinIRISCompletedEventHandler CreateQuickIncidentinIRISCompleted;
        
        /// <remarks/>
        public event GetOfferingsListBySubscriberIDCompletedEventHandler GetOfferingsListBySubscriberIDCompleted;
        
        /// <remarks/>
        public event GetDashboardReportByGroupCompletedEventHandler GetDashboardReportByGroupCompleted;
        
        /// <remarks/>
        public event GetServiceGroupLookUpCompletedEventHandler GetServiceGroupLookUpCompleted;
        
        /// <remarks/>
        public event AddIncidentNoteCompletedEventHandler AddIncidentNoteCompleted;
        
        /// <remarks/>
        public event ResetStaticDataCompletedEventHandler ResetStaticDataCompleted;
        
        /// <remarks/>
        public event QuickResolveIncidentCompletedEventHandler QuickResolveIncidentCompleted;
        
        /// <remarks/>
        public event UpdatePriorityCompletedEventHandler UpdatePriorityCompleted;
        
        /// <remarks/>
        public event GetAllPrioritiesCompletedEventHandler GetAllPrioritiesCompleted;
        
        /// <remarks/>
        public event GetPrioritiesByDocumentTypeCompletedEventHandler GetPrioritiesByDocumentTypeCompleted;
        
        /// <remarks/>
        public event GetVersionCompletedEventHandler GetVersionCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateIncidentInIRIS", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long CreateIncidentInIRIS(int subscriberID, string subject, string Note, string customerEmailAddress, string originalIPAddress, int groupID, int serviceID, int privateLabelID, string shopperID, string createdBy) {
            object[] results = this.Invoke("CreateIncidentInIRIS", new object[] {
                        subscriberID,
                        subject,
                        Note,
                        customerEmailAddress,
                        originalIPAddress,
                        groupID,
                        serviceID,
                        privateLabelID,
                        shopperID,
                        createdBy});
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void CreateIncidentInIRISAsync(int subscriberID, string subject, string Note, string customerEmailAddress, string originalIPAddress, int groupID, int serviceID, int privateLabelID, string shopperID, string createdBy) {
            this.CreateIncidentInIRISAsync(subscriberID, subject, Note, customerEmailAddress, originalIPAddress, groupID, serviceID, privateLabelID, shopperID, createdBy, null);
        }
        
        /// <remarks/>
        public void CreateIncidentInIRISAsync(int subscriberID, string subject, string Note, string customerEmailAddress, string originalIPAddress, int groupID, int serviceID, int privateLabelID, string shopperID, string createdBy, object userState) {
            if ((this.CreateIncidentInIRISOperationCompleted == null)) {
                this.CreateIncidentInIRISOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateIncidentInIRISOperationCompleted);
            }
            this.InvokeAsync("CreateIncidentInIRIS", new object[] {
                        subscriberID,
                        subject,
                        Note,
                        customerEmailAddress,
                        originalIPAddress,
                        groupID,
                        serviceID,
                        privateLabelID,
                        shopperID,
                        createdBy}, this.CreateIncidentInIRISOperationCompleted, userState);
        }
        
        private void OnCreateIncidentInIRISOperationCompleted(object arg) {
            if ((this.CreateIncidentInIRISCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateIncidentInIRISCompleted(this, new CreateIncidentInIRISCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateIncidentInIRISByType", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long CreateIncidentInIRISByType(int subscriberID, string subject, string Note, string customerEmailAddress, string originalIPAddress, int groupID, int serviceID, int privateLabelID, string shopperID, string createdBy, int incidentType) {
            object[] results = this.Invoke("CreateIncidentInIRISByType", new object[] {
                        subscriberID,
                        subject,
                        Note,
                        customerEmailAddress,
                        originalIPAddress,
                        groupID,
                        serviceID,
                        privateLabelID,
                        shopperID,
                        createdBy,
                        incidentType});
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void CreateIncidentInIRISByTypeAsync(int subscriberID, string subject, string Note, string customerEmailAddress, string originalIPAddress, int groupID, int serviceID, int privateLabelID, string shopperID, string createdBy, int incidentType) {
            this.CreateIncidentInIRISByTypeAsync(subscriberID, subject, Note, customerEmailAddress, originalIPAddress, groupID, serviceID, privateLabelID, shopperID, createdBy, incidentType, null);
        }
        
        /// <remarks/>
        public void CreateIncidentInIRISByTypeAsync(int subscriberID, string subject, string Note, string customerEmailAddress, string originalIPAddress, int groupID, int serviceID, int privateLabelID, string shopperID, string createdBy, int incidentType, object userState) {
            if ((this.CreateIncidentInIRISByTypeOperationCompleted == null)) {
                this.CreateIncidentInIRISByTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateIncidentInIRISByTypeOperationCompleted);
            }
            this.InvokeAsync("CreateIncidentInIRISByType", new object[] {
                        subscriberID,
                        subject,
                        Note,
                        customerEmailAddress,
                        originalIPAddress,
                        groupID,
                        serviceID,
                        privateLabelID,
                        shopperID,
                        createdBy,
                        incidentType}, this.CreateIncidentInIRISByTypeOperationCompleted, userState);
        }
        
        private void OnCreateIncidentInIRISByTypeOperationCompleted(object arg) {
            if ((this.CreateIncidentInIRISByTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateIncidentInIRISByTypeCompleted(this, new CreateIncidentInIRISByTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateIncidentInIRISByEmployee", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long CreateIncidentInIRISByEmployee(int subscriberID, string subject, string Note, string customerEmailAddress, string originalIPAddress, int groupID, int serviceID, int privateLabelID, string shopperID, string createdBy, int employeeID) {
            object[] results = this.Invoke("CreateIncidentInIRISByEmployee", new object[] {
                        subscriberID,
                        subject,
                        Note,
                        customerEmailAddress,
                        originalIPAddress,
                        groupID,
                        serviceID,
                        privateLabelID,
                        shopperID,
                        createdBy,
                        employeeID});
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void CreateIncidentInIRISByEmployeeAsync(int subscriberID, string subject, string Note, string customerEmailAddress, string originalIPAddress, int groupID, int serviceID, int privateLabelID, string shopperID, string createdBy, int employeeID) {
            this.CreateIncidentInIRISByEmployeeAsync(subscriberID, subject, Note, customerEmailAddress, originalIPAddress, groupID, serviceID, privateLabelID, shopperID, createdBy, employeeID, null);
        }
        
        /// <remarks/>
        public void CreateIncidentInIRISByEmployeeAsync(int subscriberID, string subject, string Note, string customerEmailAddress, string originalIPAddress, int groupID, int serviceID, int privateLabelID, string shopperID, string createdBy, int employeeID, object userState) {
            if ((this.CreateIncidentInIRISByEmployeeOperationCompleted == null)) {
                this.CreateIncidentInIRISByEmployeeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateIncidentInIRISByEmployeeOperationCompleted);
            }
            this.InvokeAsync("CreateIncidentInIRISByEmployee", new object[] {
                        subscriberID,
                        subject,
                        Note,
                        customerEmailAddress,
                        originalIPAddress,
                        groupID,
                        serviceID,
                        privateLabelID,
                        shopperID,
                        createdBy,
                        employeeID}, this.CreateIncidentInIRISByEmployeeOperationCompleted, userState);
        }
        
        private void OnCreateIncidentInIRISByEmployeeOperationCompleted(object arg) {
            if ((this.CreateIncidentInIRISByEmployeeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateIncidentInIRISByEmployeeCompleted(this, new CreateIncidentInIRISByEmployeeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateIncidentInIRISByPriority", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long CreateIncidentInIRISByPriority(int subscriberID, string subject, string Note, string customerEmailAddress, string originalIPAddress, int groupID, int serviceID, int privateLabelID, string shopperID, string createdBy, int incidentType, int employeeID, int priority) {
            object[] results = this.Invoke("CreateIncidentInIRISByPriority", new object[] {
                        subscriberID,
                        subject,
                        Note,
                        customerEmailAddress,
                        originalIPAddress,
                        groupID,
                        serviceID,
                        privateLabelID,
                        shopperID,
                        createdBy,
                        incidentType,
                        employeeID,
                        priority});
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void CreateIncidentInIRISByPriorityAsync(int subscriberID, string subject, string Note, string customerEmailAddress, string originalIPAddress, int groupID, int serviceID, int privateLabelID, string shopperID, string createdBy, int incidentType, int employeeID, int priority) {
            this.CreateIncidentInIRISByPriorityAsync(subscriberID, subject, Note, customerEmailAddress, originalIPAddress, groupID, serviceID, privateLabelID, shopperID, createdBy, incidentType, employeeID, priority, null);
        }
        
        /// <remarks/>
        public void CreateIncidentInIRISByPriorityAsync(int subscriberID, string subject, string Note, string customerEmailAddress, string originalIPAddress, int groupID, int serviceID, int privateLabelID, string shopperID, string createdBy, int incidentType, int employeeID, int priority, object userState) {
            if ((this.CreateIncidentInIRISByPriorityOperationCompleted == null)) {
                this.CreateIncidentInIRISByPriorityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateIncidentInIRISByPriorityOperationCompleted);
            }
            this.InvokeAsync("CreateIncidentInIRISByPriority", new object[] {
                        subscriberID,
                        subject,
                        Note,
                        customerEmailAddress,
                        originalIPAddress,
                        groupID,
                        serviceID,
                        privateLabelID,
                        shopperID,
                        createdBy,
                        incidentType,
                        employeeID,
                        priority}, this.CreateIncidentInIRISByPriorityOperationCompleted, userState);
        }
        
        private void OnCreateIncidentInIRISByPriorityOperationCompleted(object arg) {
            if ((this.CreateIncidentInIRISByPriorityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateIncidentInIRISByPriorityCompleted(this, new CreateIncidentInIRISByPriorityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateQuickIncidentinIRIS", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long CreateQuickIncidentinIRIS(int subscriberID, string subject, string Note, string customerEmailAddress, string originalIPAddress, string createdBy, int privateLabelID, string shopperID) {
            object[] results = this.Invoke("CreateQuickIncidentinIRIS", new object[] {
                        subscriberID,
                        subject,
                        Note,
                        customerEmailAddress,
                        originalIPAddress,
                        createdBy,
                        privateLabelID,
                        shopperID});
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void CreateQuickIncidentinIRISAsync(int subscriberID, string subject, string Note, string customerEmailAddress, string originalIPAddress, string createdBy, int privateLabelID, string shopperID) {
            this.CreateQuickIncidentinIRISAsync(subscriberID, subject, Note, customerEmailAddress, originalIPAddress, createdBy, privateLabelID, shopperID, null);
        }
        
        /// <remarks/>
        public void CreateQuickIncidentinIRISAsync(int subscriberID, string subject, string Note, string customerEmailAddress, string originalIPAddress, string createdBy, int privateLabelID, string shopperID, object userState) {
            if ((this.CreateQuickIncidentinIRISOperationCompleted == null)) {
                this.CreateQuickIncidentinIRISOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateQuickIncidentinIRISOperationCompleted);
            }
            this.InvokeAsync("CreateQuickIncidentinIRIS", new object[] {
                        subscriberID,
                        subject,
                        Note,
                        customerEmailAddress,
                        originalIPAddress,
                        createdBy,
                        privateLabelID,
                        shopperID}, this.CreateQuickIncidentinIRISOperationCompleted, userState);
        }
        
        private void OnCreateQuickIncidentinIRISOperationCompleted(object arg) {
            if ((this.CreateQuickIncidentinIRISCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateQuickIncidentinIRISCompleted(this, new CreateQuickIncidentinIRISCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetOfferingsListBySubscriberID", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetOfferingsListBySubscriberID(int subscriberID) {
            object[] results = this.Invoke("GetOfferingsListBySubscriberID", new object[] {
                        subscriberID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetOfferingsListBySubscriberIDAsync(int subscriberID) {
            this.GetOfferingsListBySubscriberIDAsync(subscriberID, null);
        }
        
        /// <remarks/>
        public void GetOfferingsListBySubscriberIDAsync(int subscriberID, object userState) {
            if ((this.GetOfferingsListBySubscriberIDOperationCompleted == null)) {
                this.GetOfferingsListBySubscriberIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOfferingsListBySubscriberIDOperationCompleted);
            }
            this.InvokeAsync("GetOfferingsListBySubscriberID", new object[] {
                        subscriberID}, this.GetOfferingsListBySubscriberIDOperationCompleted, userState);
        }
        
        private void OnGetOfferingsListBySubscriberIDOperationCompleted(object arg) {
            if ((this.GetOfferingsListBySubscriberIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOfferingsListBySubscriberIDCompleted(this, new GetOfferingsListBySubscriberIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDashboardReportByGroup", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDashboardReportByGroup(int groupID) {
            object[] results = this.Invoke("GetDashboardReportByGroup", new object[] {
                        groupID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDashboardReportByGroupAsync(int groupID) {
            this.GetDashboardReportByGroupAsync(groupID, null);
        }
        
        /// <remarks/>
        public void GetDashboardReportByGroupAsync(int groupID, object userState) {
            if ((this.GetDashboardReportByGroupOperationCompleted == null)) {
                this.GetDashboardReportByGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDashboardReportByGroupOperationCompleted);
            }
            this.InvokeAsync("GetDashboardReportByGroup", new object[] {
                        groupID}, this.GetDashboardReportByGroupOperationCompleted, userState);
        }
        
        private void OnGetDashboardReportByGroupOperationCompleted(object arg) {
            if ((this.GetDashboardReportByGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDashboardReportByGroupCompleted(this, new GetDashboardReportByGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetServiceGroupLookUp", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetServiceGroupLookUp() {
            object[] results = this.Invoke("GetServiceGroupLookUp", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetServiceGroupLookUpAsync() {
            this.GetServiceGroupLookUpAsync(null);
        }
        
        /// <remarks/>
        public void GetServiceGroupLookUpAsync(object userState) {
            if ((this.GetServiceGroupLookUpOperationCompleted == null)) {
                this.GetServiceGroupLookUpOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServiceGroupLookUpOperationCompleted);
            }
            this.InvokeAsync("GetServiceGroupLookUp", new object[0], this.GetServiceGroupLookUpOperationCompleted, userState);
        }
        
        private void OnGetServiceGroupLookUpOperationCompleted(object arg) {
            if ((this.GetServiceGroupLookUpCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServiceGroupLookUpCompleted(this, new GetServiceGroupLookUpCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddIncidentNote", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddIncidentNote(long incidentID, string Note, string NTLogin) {
            object[] results = this.Invoke("AddIncidentNote", new object[] {
                        incidentID,
                        Note,
                        NTLogin});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddIncidentNoteAsync(long incidentID, string Note, string NTLogin) {
            this.AddIncidentNoteAsync(incidentID, Note, NTLogin, null);
        }
        
        /// <remarks/>
        public void AddIncidentNoteAsync(long incidentID, string Note, string NTLogin, object userState) {
            if ((this.AddIncidentNoteOperationCompleted == null)) {
                this.AddIncidentNoteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddIncidentNoteOperationCompleted);
            }
            this.InvokeAsync("AddIncidentNote", new object[] {
                        incidentID,
                        Note,
                        NTLogin}, this.AddIncidentNoteOperationCompleted, userState);
        }
        
        private void OnAddIncidentNoteOperationCompleted(object arg) {
            if ((this.AddIncidentNoteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddIncidentNoteCompleted(this, new AddIncidentNoteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ResetStaticData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ResetStaticData() {
            this.Invoke("ResetStaticData", new object[0]);
        }
        
        /// <remarks/>
        public void ResetStaticDataAsync() {
            this.ResetStaticDataAsync(null);
        }
        
        /// <remarks/>
        public void ResetStaticDataAsync(object userState) {
            if ((this.ResetStaticDataOperationCompleted == null)) {
                this.ResetStaticDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnResetStaticDataOperationCompleted);
            }
            this.InvokeAsync("ResetStaticData", new object[0], this.ResetStaticDataOperationCompleted, userState);
        }
        
        private void OnResetStaticDataOperationCompleted(object arg) {
            if ((this.ResetStaticDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ResetStaticDataCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/QuickResolveIncident", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long QuickResolveIncident(int subscriberID, string subject, string note, string customerEmailAddress, string originalIPAddress, int groupID, int serviceID, int privateLabelID, string shopperID, string createdBy, int employeeID) {
            object[] results = this.Invoke("QuickResolveIncident", new object[] {
                        subscriberID,
                        subject,
                        note,
                        customerEmailAddress,
                        originalIPAddress,
                        groupID,
                        serviceID,
                        privateLabelID,
                        shopperID,
                        createdBy,
                        employeeID});
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void QuickResolveIncidentAsync(int subscriberID, string subject, string note, string customerEmailAddress, string originalIPAddress, int groupID, int serviceID, int privateLabelID, string shopperID, string createdBy, int employeeID) {
            this.QuickResolveIncidentAsync(subscriberID, subject, note, customerEmailAddress, originalIPAddress, groupID, serviceID, privateLabelID, shopperID, createdBy, employeeID, null);
        }
        
        /// <remarks/>
        public void QuickResolveIncidentAsync(int subscriberID, string subject, string note, string customerEmailAddress, string originalIPAddress, int groupID, int serviceID, int privateLabelID, string shopperID, string createdBy, int employeeID, object userState) {
            if ((this.QuickResolveIncidentOperationCompleted == null)) {
                this.QuickResolveIncidentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQuickResolveIncidentOperationCompleted);
            }
            this.InvokeAsync("QuickResolveIncident", new object[] {
                        subscriberID,
                        subject,
                        note,
                        customerEmailAddress,
                        originalIPAddress,
                        groupID,
                        serviceID,
                        privateLabelID,
                        shopperID,
                        createdBy,
                        employeeID}, this.QuickResolveIncidentOperationCompleted, userState);
        }
        
        private void OnQuickResolveIncidentOperationCompleted(object arg) {
            if ((this.QuickResolveIncidentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QuickResolveIncidentCompleted(this, new QuickResolveIncidentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdatePriority", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int UpdatePriority(long incidentID, string updatedBy, int newPriority) {
            object[] results = this.Invoke("UpdatePriority", new object[] {
                        incidentID,
                        updatedBy,
                        newPriority});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void UpdatePriorityAsync(long incidentID, string updatedBy, int newPriority) {
            this.UpdatePriorityAsync(incidentID, updatedBy, newPriority, null);
        }
        
        /// <remarks/>
        public void UpdatePriorityAsync(long incidentID, string updatedBy, int newPriority, object userState) {
            if ((this.UpdatePriorityOperationCompleted == null)) {
                this.UpdatePriorityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdatePriorityOperationCompleted);
            }
            this.InvokeAsync("UpdatePriority", new object[] {
                        incidentID,
                        updatedBy,
                        newPriority}, this.UpdatePriorityOperationCompleted, userState);
        }
        
        private void OnUpdatePriorityOperationCompleted(object arg) {
            if ((this.UpdatePriorityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdatePriorityCompleted(this, new UpdatePriorityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAllPriorities", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetAllPriorities() {
            object[] results = this.Invoke("GetAllPriorities", new object[0]);
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetAllPrioritiesAsync() {
            this.GetAllPrioritiesAsync(null);
        }
        
        /// <remarks/>
        public void GetAllPrioritiesAsync(object userState) {
            if ((this.GetAllPrioritiesOperationCompleted == null)) {
                this.GetAllPrioritiesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllPrioritiesOperationCompleted);
            }
            this.InvokeAsync("GetAllPriorities", new object[0], this.GetAllPrioritiesOperationCompleted, userState);
        }
        
        private void OnGetAllPrioritiesOperationCompleted(object arg) {
            if ((this.GetAllPrioritiesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllPrioritiesCompleted(this, new GetAllPrioritiesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPrioritiesByDocumentType", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetPrioritiesByDocumentType(int documentTypeID) {
            object[] results = this.Invoke("GetPrioritiesByDocumentType", new object[] {
                        documentTypeID});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetPrioritiesByDocumentTypeAsync(int documentTypeID) {
            this.GetPrioritiesByDocumentTypeAsync(documentTypeID, null);
        }
        
        /// <remarks/>
        public void GetPrioritiesByDocumentTypeAsync(int documentTypeID, object userState) {
            if ((this.GetPrioritiesByDocumentTypeOperationCompleted == null)) {
                this.GetPrioritiesByDocumentTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPrioritiesByDocumentTypeOperationCompleted);
            }
            this.InvokeAsync("GetPrioritiesByDocumentType", new object[] {
                        documentTypeID}, this.GetPrioritiesByDocumentTypeOperationCompleted, userState);
        }
        
        private void OnGetPrioritiesByDocumentTypeOperationCompleted(object arg) {
            if ((this.GetPrioritiesByDocumentTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPrioritiesByDocumentTypeCompleted(this, new GetPrioritiesByDocumentTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetVersion", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetVersion() {
            object[] results = this.Invoke("GetVersion", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetVersionAsync() {
            this.GetVersionAsync(null);
        }
        
        /// <remarks/>
        public void GetVersionAsync(object userState) {
            if ((this.GetVersionOperationCompleted == null)) {
                this.GetVersionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetVersionOperationCompleted);
            }
            this.InvokeAsync("GetVersion", new object[0], this.GetVersionOperationCompleted, userState);
        }
        
        private void OnGetVersionOperationCompleted(object arg) {
            if ((this.GetVersionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetVersionCompleted(this, new GetVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CreateIncidentInIRISCompletedEventHandler(object sender, CreateIncidentInIRISCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateIncidentInIRISCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateIncidentInIRISCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CreateIncidentInIRISByTypeCompletedEventHandler(object sender, CreateIncidentInIRISByTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateIncidentInIRISByTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateIncidentInIRISByTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CreateIncidentInIRISByEmployeeCompletedEventHandler(object sender, CreateIncidentInIRISByEmployeeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateIncidentInIRISByEmployeeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateIncidentInIRISByEmployeeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CreateIncidentInIRISByPriorityCompletedEventHandler(object sender, CreateIncidentInIRISByPriorityCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateIncidentInIRISByPriorityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateIncidentInIRISByPriorityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CreateQuickIncidentinIRISCompletedEventHandler(object sender, CreateQuickIncidentinIRISCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateQuickIncidentinIRISCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateQuickIncidentinIRISCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetOfferingsListBySubscriberIDCompletedEventHandler(object sender, GetOfferingsListBySubscriberIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOfferingsListBySubscriberIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetOfferingsListBySubscriberIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetDashboardReportByGroupCompletedEventHandler(object sender, GetDashboardReportByGroupCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDashboardReportByGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDashboardReportByGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetServiceGroupLookUpCompletedEventHandler(object sender, GetServiceGroupLookUpCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServiceGroupLookUpCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServiceGroupLookUpCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AddIncidentNoteCompletedEventHandler(object sender, AddIncidentNoteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddIncidentNoteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddIncidentNoteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ResetStaticDataCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void QuickResolveIncidentCompletedEventHandler(object sender, QuickResolveIncidentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QuickResolveIncidentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal QuickResolveIncidentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UpdatePriorityCompletedEventHandler(object sender, UpdatePriorityCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdatePriorityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdatePriorityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetAllPrioritiesCompletedEventHandler(object sender, GetAllPrioritiesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllPrioritiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllPrioritiesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetPrioritiesByDocumentTypeCompletedEventHandler(object sender, GetPrioritiesByDocumentTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPrioritiesByDocumentTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPrioritiesByDocumentTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetVersionCompletedEventHandler(object sender, GetVersionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591