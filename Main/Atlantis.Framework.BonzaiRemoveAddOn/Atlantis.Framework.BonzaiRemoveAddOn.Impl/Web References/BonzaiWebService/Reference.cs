//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.1.
// 
#pragma warning disable 1591

namespace Atlantis.Framework.BonzaiRemoveAddOn.Impl.BonzaiWebService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ServiceSoap", Namespace="#AddOnManager")]
    public partial class Service : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback ApplyAddOnOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveAddOnOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Service() {
            this.Url = global::Atlantis.Framework.BonzaiRemoveAddOn.Impl.Properties.Settings.Default.Atlantis_Framework_BonzaiApplyAddOn_Impl_BonzaiWebService_Service;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event ApplyAddOnCompletedEventHandler ApplyAddOnCompleted;
        
        /// <remarks/>
        public event RemoveAddOnCompletedEventHandler RemoveAddOnCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#AddOnManager/ApplyAddOn", RequestNamespace="#AddOnManager", ResponseNamespace="#AddOnManager", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Response")]
        public WebServiceResponse ApplyAddOn(string ShopperID, string AccountUID, string AddOnType) {
            object[] results = this.Invoke("ApplyAddOn", new object[] {
                        ShopperID,
                        AccountUID,
                        AddOnType});
            return ((WebServiceResponse)(results[0]));
        }
        
        /// <remarks/>
        public void ApplyAddOnAsync(string ShopperID, string AccountUID, string AddOnType) {
            this.ApplyAddOnAsync(ShopperID, AccountUID, AddOnType, null);
        }
        
        /// <remarks/>
        public void ApplyAddOnAsync(string ShopperID, string AccountUID, string AddOnType, object userState) {
            if ((this.ApplyAddOnOperationCompleted == null)) {
                this.ApplyAddOnOperationCompleted = new System.Threading.SendOrPostCallback(this.OnApplyAddOnOperationCompleted);
            }
            this.InvokeAsync("ApplyAddOn", new object[] {
                        ShopperID,
                        AccountUID,
                        AddOnType}, this.ApplyAddOnOperationCompleted, userState);
        }
        
        private void OnApplyAddOnOperationCompleted(object arg) {
            if ((this.ApplyAddOnCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ApplyAddOnCompleted(this, new ApplyAddOnCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#AddOnManager/RemoveAddOn", RequestNamespace="#AddOnManager", ResponseNamespace="#AddOnManager", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Response")]
        public WebServiceResponse RemoveAddOn(string ShopperID, string AccountUID, string AttributeUID, string AddOnType) {
            object[] results = this.Invoke("RemoveAddOn", new object[] {
                        ShopperID,
                        AccountUID,
                        AttributeUID,
                        AddOnType});
            return ((WebServiceResponse)(results[0]));
        }
        
        /// <remarks/>
        public void RemoveAddOnAsync(string ShopperID, string AccountUID, string AttributeUID, string AddOnType) {
            this.RemoveAddOnAsync(ShopperID, AccountUID, AttributeUID, AddOnType, null);
        }
        
        /// <remarks/>
        public void RemoveAddOnAsync(string ShopperID, string AccountUID, string AttributeUID, string AddOnType, object userState) {
            if ((this.RemoveAddOnOperationCompleted == null)) {
                this.RemoveAddOnOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveAddOnOperationCompleted);
            }
            this.InvokeAsync("RemoveAddOn", new object[] {
                        ShopperID,
                        AccountUID,
                        AttributeUID,
                        AddOnType}, this.RemoveAddOnOperationCompleted, userState);
        }
        
        private void OnRemoveAddOnOperationCompleted(object arg) {
            if ((this.RemoveAddOnCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveAddOnCompleted(this, new RemoveAddOnCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="#AddOnManager")]
    public partial class WebServiceResponse {
        
        private int resultCodeField;
        
        /// <remarks/>
        public int ResultCode {
            get {
                return this.resultCodeField;
            }
            set {
                this.resultCodeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ApplyAddOnCompletedEventHandler(object sender, ApplyAddOnCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ApplyAddOnCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ApplyAddOnCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public WebServiceResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((WebServiceResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void RemoveAddOnCompletedEventHandler(object sender, RemoveAddOnCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoveAddOnCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoveAddOnCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public WebServiceResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((WebServiceResponse)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591