//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.1.
// 
#pragma warning disable 1591

namespace Atlantis.Framework.ChangePassword.Impl.AuthenticationWS {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="WScgdAuthenticateServiceSoap", Namespace="urn:WScgdAuthenticateService")]
    public partial class WScgdAuthenticateService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetHintOperationCompleted;
        
        private System.Threading.SendOrPostCallback VerifyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAuthTokenOperationCompleted;
        
        private System.Threading.SendOrPostCallback ResetPasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback LookupNamespaceOperationCompleted;
        
        private System.Threading.SendOrPostCallback AuthorizeOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsStrongPasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChangePasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback ValidateDigestAuthOperationCompleted;
        
        private System.Threading.SendOrPostCallback AuthorizeAPIResellerOperationCompleted;
        
        private System.Threading.SendOrPostCallback ValidatePINOperationCompleted;
        
        private System.Threading.SendOrPostCallback RetrievePINOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public WScgdAuthenticateService() {
            this.Url = global::Atlantis.Framework.ChangePassword.Impl.Properties.Settings.Default.Atlantis_Framework_ChangePassword_Impl_AuthenticationWS_WScgdAuthenticateService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetHintCompletedEventHandler GetHintCompleted;
        
        /// <remarks/>
        public event VerifyCompletedEventHandler VerifyCompleted;
        
        /// <remarks/>
        public event GetAuthTokenCompletedEventHandler GetAuthTokenCompleted;
        
        /// <remarks/>
        public event ResetPasswordCompletedEventHandler ResetPasswordCompleted;
        
        /// <remarks/>
        public event LookupNamespaceCompletedEventHandler LookupNamespaceCompleted;
        
        /// <remarks/>
        public event AuthorizeCompletedEventHandler AuthorizeCompleted;
        
        /// <remarks/>
        public event IsStrongPasswordCompletedEventHandler IsStrongPasswordCompleted;
        
        /// <remarks/>
        public event ChangePasswordCompletedEventHandler ChangePasswordCompleted;
        
        /// <remarks/>
        public event ValidateDigestAuthCompletedEventHandler ValidateDigestAuthCompleted;
        
        /// <remarks/>
        public event AuthorizeAPIResellerCompletedEventHandler AuthorizeAPIResellerCompleted;
        
        /// <remarks/>
        public event ValidatePINCompletedEventHandler ValidatePINCompleted;
        
        /// <remarks/>
        public event RetrievePINCompletedEventHandler RetrievePINCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("#GetHint", RequestNamespace="urn:WScgdAuthenticateService", ResponseNamespace="urn:WScgdAuthenticateService")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public int GetHint(string bstrLoginName, int lPrivateLabelID, string bstrStreet, out string pbstrPwdHint, out string pbstrError) {
            object[] results = this.Invoke("GetHint", new object[] {
                        bstrLoginName,
                        lPrivateLabelID,
                        bstrStreet});
            pbstrPwdHint = ((string)(results[1]));
            pbstrError = ((string)(results[2]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetHintAsync(string bstrLoginName, int lPrivateLabelID, string bstrStreet) {
            this.GetHintAsync(bstrLoginName, lPrivateLabelID, bstrStreet, null);
        }
        
        /// <remarks/>
        public void GetHintAsync(string bstrLoginName, int lPrivateLabelID, string bstrStreet, object userState) {
            if ((this.GetHintOperationCompleted == null)) {
                this.GetHintOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHintOperationCompleted);
            }
            this.InvokeAsync("GetHint", new object[] {
                        bstrLoginName,
                        lPrivateLabelID,
                        bstrStreet}, this.GetHintOperationCompleted, userState);
        }
        
        private void OnGetHintOperationCompleted(object arg) {
            if ((this.GetHintCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetHintCompleted(this, new GetHintCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("#Verify", RequestNamespace="urn:WScgdAuthenticateService", ResponseNamespace="urn:WScgdAuthenticateService")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public int Verify(string bstrLoginName, string bstrPassword, int lPrivateLabelID, string bstrIPAddress, out string pbstrLoginKey, out string pbstrValidationSource, out string pbstrError) {
            object[] results = this.Invoke("Verify", new object[] {
                        bstrLoginName,
                        bstrPassword,
                        lPrivateLabelID,
                        bstrIPAddress});
            pbstrLoginKey = ((string)(results[1]));
            pbstrValidationSource = ((string)(results[2]));
            pbstrError = ((string)(results[3]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void VerifyAsync(string bstrLoginName, string bstrPassword, int lPrivateLabelID, string bstrIPAddress) {
            this.VerifyAsync(bstrLoginName, bstrPassword, lPrivateLabelID, bstrIPAddress, null);
        }
        
        /// <remarks/>
        public void VerifyAsync(string bstrLoginName, string bstrPassword, int lPrivateLabelID, string bstrIPAddress, object userState) {
            if ((this.VerifyOperationCompleted == null)) {
                this.VerifyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnVerifyOperationCompleted);
            }
            this.InvokeAsync("Verify", new object[] {
                        bstrLoginName,
                        bstrPassword,
                        lPrivateLabelID,
                        bstrIPAddress}, this.VerifyOperationCompleted, userState);
        }
        
        private void OnVerifyOperationCompleted(object arg) {
            if ((this.VerifyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.VerifyCompleted(this, new VerifyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("#GetAuthToken", RequestNamespace="urn:WScgdAuthenticateService", ResponseNamespace="urn:WScgdAuthenticateService")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public int GetAuthToken(string bstrLoginName, int lPrivateLabelID, out string pbstrGUID, out string pbstrError) {
            object[] results = this.Invoke("GetAuthToken", new object[] {
                        bstrLoginName,
                        lPrivateLabelID});
            pbstrGUID = ((string)(results[1]));
            pbstrError = ((string)(results[2]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetAuthTokenAsync(string bstrLoginName, int lPrivateLabelID) {
            this.GetAuthTokenAsync(bstrLoginName, lPrivateLabelID, null);
        }
        
        /// <remarks/>
        public void GetAuthTokenAsync(string bstrLoginName, int lPrivateLabelID, object userState) {
            if ((this.GetAuthTokenOperationCompleted == null)) {
                this.GetAuthTokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAuthTokenOperationCompleted);
            }
            this.InvokeAsync("GetAuthToken", new object[] {
                        bstrLoginName,
                        lPrivateLabelID}, this.GetAuthTokenOperationCompleted, userState);
        }
        
        private void OnGetAuthTokenOperationCompleted(object arg) {
            if ((this.GetAuthTokenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAuthTokenCompleted(this, new GetAuthTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("#ResetPassword", RequestNamespace="urn:WScgdAuthenticateService", ResponseNamespace="urn:WScgdAuthenticateService")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public int ResetPassword(string bstrLoginName, int lPrivateLabelID, string bstrIPAddress, string bstrNewPassword, string bstrNewHint, string bstrGUID, out string pbstrError) {
            object[] results = this.Invoke("ResetPassword", new object[] {
                        bstrLoginName,
                        lPrivateLabelID,
                        bstrIPAddress,
                        bstrNewPassword,
                        bstrNewHint,
                        bstrGUID});
            pbstrError = ((string)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void ResetPasswordAsync(string bstrLoginName, int lPrivateLabelID, string bstrIPAddress, string bstrNewPassword, string bstrNewHint, string bstrGUID) {
            this.ResetPasswordAsync(bstrLoginName, lPrivateLabelID, bstrIPAddress, bstrNewPassword, bstrNewHint, bstrGUID, null);
        }
        
        /// <remarks/>
        public void ResetPasswordAsync(string bstrLoginName, int lPrivateLabelID, string bstrIPAddress, string bstrNewPassword, string bstrNewHint, string bstrGUID, object userState) {
            if ((this.ResetPasswordOperationCompleted == null)) {
                this.ResetPasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnResetPasswordOperationCompleted);
            }
            this.InvokeAsync("ResetPassword", new object[] {
                        bstrLoginName,
                        lPrivateLabelID,
                        bstrIPAddress,
                        bstrNewPassword,
                        bstrNewHint,
                        bstrGUID}, this.ResetPasswordOperationCompleted, userState);
        }
        
        private void OnResetPasswordOperationCompleted(object arg) {
            if ((this.ResetPasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ResetPasswordCompleted(this, new ResetPasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("#LookupNamespace", RequestNamespace="urn:WScgdAuthenticateService", ResponseNamespace="urn:WScgdAuthenticateService")]
        [return: System.Xml.Serialization.SoapElementAttribute("pbstrShopperID")]
        public string LookupNamespace(string bstrNamespace, string bstrKey, int lPrivateLabelID, out string pbstrEmail, out string pbstrError) {
            object[] results = this.Invoke("LookupNamespace", new object[] {
                        bstrNamespace,
                        bstrKey,
                        lPrivateLabelID});
            pbstrEmail = ((string)(results[1]));
            pbstrError = ((string)(results[2]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void LookupNamespaceAsync(string bstrNamespace, string bstrKey, int lPrivateLabelID) {
            this.LookupNamespaceAsync(bstrNamespace, bstrKey, lPrivateLabelID, null);
        }
        
        /// <remarks/>
        public void LookupNamespaceAsync(string bstrNamespace, string bstrKey, int lPrivateLabelID, object userState) {
            if ((this.LookupNamespaceOperationCompleted == null)) {
                this.LookupNamespaceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLookupNamespaceOperationCompleted);
            }
            this.InvokeAsync("LookupNamespace", new object[] {
                        bstrNamespace,
                        bstrKey,
                        lPrivateLabelID}, this.LookupNamespaceOperationCompleted, userState);
        }
        
        private void OnLookupNamespaceOperationCompleted(object arg) {
            if ((this.LookupNamespaceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LookupNamespaceCompleted(this, new LookupNamespaceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("#Authorize", RequestNamespace="urn:WScgdAuthenticateService", ResponseNamespace="urn:WScgdAuthenticateService")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public int Authorize(string bstrLogin, string bstrPassword, int lPrivateLabelID, string bstrIPAddress, out string pbstrXML, out string pbstrError) {
            object[] results = this.Invoke("Authorize", new object[] {
                        bstrLogin,
                        bstrPassword,
                        lPrivateLabelID,
                        bstrIPAddress});
            pbstrXML = ((string)(results[1]));
            pbstrError = ((string)(results[2]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AuthorizeAsync(string bstrLogin, string bstrPassword, int lPrivateLabelID, string bstrIPAddress) {
            this.AuthorizeAsync(bstrLogin, bstrPassword, lPrivateLabelID, bstrIPAddress, null);
        }
        
        /// <remarks/>
        public void AuthorizeAsync(string bstrLogin, string bstrPassword, int lPrivateLabelID, string bstrIPAddress, object userState) {
            if ((this.AuthorizeOperationCompleted == null)) {
                this.AuthorizeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAuthorizeOperationCompleted);
            }
            this.InvokeAsync("Authorize", new object[] {
                        bstrLogin,
                        bstrPassword,
                        lPrivateLabelID,
                        bstrIPAddress}, this.AuthorizeOperationCompleted, userState);
        }
        
        private void OnAuthorizeOperationCompleted(object arg) {
            if ((this.AuthorizeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AuthorizeCompleted(this, new AuthorizeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("#IsStrongPassword", RequestNamespace="urn:WScgdAuthenticateService", ResponseNamespace="urn:WScgdAuthenticateService")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public int IsStrongPassword(string bstrShopperID, string bstrPassword) {
            object[] results = this.Invoke("IsStrongPassword", new object[] {
                        bstrShopperID,
                        bstrPassword});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void IsStrongPasswordAsync(string bstrShopperID, string bstrPassword) {
            this.IsStrongPasswordAsync(bstrShopperID, bstrPassword, null);
        }
        
        /// <remarks/>
        public void IsStrongPasswordAsync(string bstrShopperID, string bstrPassword, object userState) {
            if ((this.IsStrongPasswordOperationCompleted == null)) {
                this.IsStrongPasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsStrongPasswordOperationCompleted);
            }
            this.InvokeAsync("IsStrongPassword", new object[] {
                        bstrShopperID,
                        bstrPassword}, this.IsStrongPasswordOperationCompleted, userState);
        }
        
        private void OnIsStrongPasswordOperationCompleted(object arg) {
            if ((this.IsStrongPasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsStrongPasswordCompleted(this, new IsStrongPasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("#ChangePassword", RequestNamespace="urn:WScgdAuthenticateService", ResponseNamespace="urn:WScgdAuthenticateService")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public int ChangePassword(string bstrShopperID, int lPrivateLabelID, string bstrCurrentPassword, string bstrNewPassword, string bstrNewHint, string bstrNewLogin, int lStrong, out string pbstrError) {
            object[] results = this.Invoke("ChangePassword", new object[] {
                        bstrShopperID,
                        lPrivateLabelID,
                        bstrCurrentPassword,
                        bstrNewPassword,
                        bstrNewHint,
                        bstrNewLogin,
                        lStrong});
            pbstrError = ((string)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void ChangePasswordAsync(string bstrShopperID, int lPrivateLabelID, string bstrCurrentPassword, string bstrNewPassword, string bstrNewHint, string bstrNewLogin, int lStrong) {
            this.ChangePasswordAsync(bstrShopperID, lPrivateLabelID, bstrCurrentPassword, bstrNewPassword, bstrNewHint, bstrNewLogin, lStrong, null);
        }
        
        /// <remarks/>
        public void ChangePasswordAsync(string bstrShopperID, int lPrivateLabelID, string bstrCurrentPassword, string bstrNewPassword, string bstrNewHint, string bstrNewLogin, int lStrong, object userState) {
            if ((this.ChangePasswordOperationCompleted == null)) {
                this.ChangePasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangePasswordOperationCompleted);
            }
            this.InvokeAsync("ChangePassword", new object[] {
                        bstrShopperID,
                        lPrivateLabelID,
                        bstrCurrentPassword,
                        bstrNewPassword,
                        bstrNewHint,
                        bstrNewLogin,
                        lStrong}, this.ChangePasswordOperationCompleted, userState);
        }
        
        private void OnChangePasswordOperationCompleted(object arg) {
            if ((this.ChangePasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangePasswordCompleted(this, new ChangePasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("#ValidateDigestAuth", RequestNamespace="urn:WScgdAuthenticateService", ResponseNamespace="urn:WScgdAuthenticateService")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public short ValidateDigestAuth(string bstrLogin, string bstrRealm, string bstrMethod, string bstrURI, string bstrNonce, string bstrQOP, string bstrClientNonce, string bstrNonceCount, string bstrResponse, out string pbstrError) {
            object[] results = this.Invoke("ValidateDigestAuth", new object[] {
                        bstrLogin,
                        bstrRealm,
                        bstrMethod,
                        bstrURI,
                        bstrNonce,
                        bstrQOP,
                        bstrClientNonce,
                        bstrNonceCount,
                        bstrResponse});
            pbstrError = ((string)(results[1]));
            return ((short)(results[0]));
        }
        
        /// <remarks/>
        public void ValidateDigestAuthAsync(string bstrLogin, string bstrRealm, string bstrMethod, string bstrURI, string bstrNonce, string bstrQOP, string bstrClientNonce, string bstrNonceCount, string bstrResponse) {
            this.ValidateDigestAuthAsync(bstrLogin, bstrRealm, bstrMethod, bstrURI, bstrNonce, bstrQOP, bstrClientNonce, bstrNonceCount, bstrResponse, null);
        }
        
        /// <remarks/>
        public void ValidateDigestAuthAsync(string bstrLogin, string bstrRealm, string bstrMethod, string bstrURI, string bstrNonce, string bstrQOP, string bstrClientNonce, string bstrNonceCount, string bstrResponse, object userState) {
            if ((this.ValidateDigestAuthOperationCompleted == null)) {
                this.ValidateDigestAuthOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidateDigestAuthOperationCompleted);
            }
            this.InvokeAsync("ValidateDigestAuth", new object[] {
                        bstrLogin,
                        bstrRealm,
                        bstrMethod,
                        bstrURI,
                        bstrNonce,
                        bstrQOP,
                        bstrClientNonce,
                        bstrNonceCount,
                        bstrResponse}, this.ValidateDigestAuthOperationCompleted, userState);
        }
        
        private void OnValidateDigestAuthOperationCompleted(object arg) {
            if ((this.ValidateDigestAuthCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ValidateDigestAuthCompleted(this, new ValidateDigestAuthCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("#AuthorizeAPIReseller", RequestNamespace="urn:WScgdAuthenticateService", ResponseNamespace="urn:WScgdAuthenticateService")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public int AuthorizeAPIReseller(string bstrLogin, string bstrPassword, string bstrIPAddress, out string pbstrError) {
            object[] results = this.Invoke("AuthorizeAPIReseller", new object[] {
                        bstrLogin,
                        bstrPassword,
                        bstrIPAddress});
            pbstrError = ((string)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AuthorizeAPIResellerAsync(string bstrLogin, string bstrPassword, string bstrIPAddress) {
            this.AuthorizeAPIResellerAsync(bstrLogin, bstrPassword, bstrIPAddress, null);
        }
        
        /// <remarks/>
        public void AuthorizeAPIResellerAsync(string bstrLogin, string bstrPassword, string bstrIPAddress, object userState) {
            if ((this.AuthorizeAPIResellerOperationCompleted == null)) {
                this.AuthorizeAPIResellerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAuthorizeAPIResellerOperationCompleted);
            }
            this.InvokeAsync("AuthorizeAPIReseller", new object[] {
                        bstrLogin,
                        bstrPassword,
                        bstrIPAddress}, this.AuthorizeAPIResellerOperationCompleted, userState);
        }
        
        private void OnAuthorizeAPIResellerOperationCompleted(object arg) {
            if ((this.AuthorizeAPIResellerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AuthorizeAPIResellerCompleted(this, new AuthorizeAPIResellerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("#ValidatePIN", RequestNamespace="urn:WScgdAuthenticateService", ResponseNamespace="urn:WScgdAuthenticateService")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public int ValidatePIN(string bstrShopperID, int lPrivateLabelID, string bstrPIN, string bstrIPAddress, out string pbstrError) {
            object[] results = this.Invoke("ValidatePIN", new object[] {
                        bstrShopperID,
                        lPrivateLabelID,
                        bstrPIN,
                        bstrIPAddress});
            pbstrError = ((string)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void ValidatePINAsync(string bstrShopperID, int lPrivateLabelID, string bstrPIN, string bstrIPAddress) {
            this.ValidatePINAsync(bstrShopperID, lPrivateLabelID, bstrPIN, bstrIPAddress, null);
        }
        
        /// <remarks/>
        public void ValidatePINAsync(string bstrShopperID, int lPrivateLabelID, string bstrPIN, string bstrIPAddress, object userState) {
            if ((this.ValidatePINOperationCompleted == null)) {
                this.ValidatePINOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidatePINOperationCompleted);
            }
            this.InvokeAsync("ValidatePIN", new object[] {
                        bstrShopperID,
                        lPrivateLabelID,
                        bstrPIN,
                        bstrIPAddress}, this.ValidatePINOperationCompleted, userState);
        }
        
        private void OnValidatePINOperationCompleted(object arg) {
            if ((this.ValidatePINCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ValidatePINCompleted(this, new ValidatePINCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("#RetrievePIN", RequestNamespace="urn:WScgdAuthenticateService", ResponseNamespace="urn:WScgdAuthenticateService")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public int RetrievePIN(string bstrShopperID, int lPrivateLabelID, string bstrPassword, string bstrIPAddress, out string pbstrPIN, out string pbstrError) {
            object[] results = this.Invoke("RetrievePIN", new object[] {
                        bstrShopperID,
                        lPrivateLabelID,
                        bstrPassword,
                        bstrIPAddress});
            pbstrPIN = ((string)(results[1]));
            pbstrError = ((string)(results[2]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void RetrievePINAsync(string bstrShopperID, int lPrivateLabelID, string bstrPassword, string bstrIPAddress) {
            this.RetrievePINAsync(bstrShopperID, lPrivateLabelID, bstrPassword, bstrIPAddress, null);
        }
        
        /// <remarks/>
        public void RetrievePINAsync(string bstrShopperID, int lPrivateLabelID, string bstrPassword, string bstrIPAddress, object userState) {
            if ((this.RetrievePINOperationCompleted == null)) {
                this.RetrievePINOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrievePINOperationCompleted);
            }
            this.InvokeAsync("RetrievePIN", new object[] {
                        bstrShopperID,
                        lPrivateLabelID,
                        bstrPassword,
                        bstrIPAddress}, this.RetrievePINOperationCompleted, userState);
        }
        
        private void OnRetrievePINOperationCompleted(object arg) {
            if ((this.RetrievePINCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrievePINCompleted(this, new RetrievePINCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetHintCompletedEventHandler(object sender, GetHintCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetHintCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetHintCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string pbstrPwdHint {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string pbstrError {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void VerifyCompletedEventHandler(object sender, VerifyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class VerifyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal VerifyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string pbstrLoginKey {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string pbstrValidationSource {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string pbstrError {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetAuthTokenCompletedEventHandler(object sender, GetAuthTokenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAuthTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAuthTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string pbstrGUID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string pbstrError {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ResetPasswordCompletedEventHandler(object sender, ResetPasswordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ResetPasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ResetPasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string pbstrError {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void LookupNamespaceCompletedEventHandler(object sender, LookupNamespaceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LookupNamespaceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LookupNamespaceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string pbstrEmail {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string pbstrError {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AuthorizeCompletedEventHandler(object sender, AuthorizeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AuthorizeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AuthorizeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string pbstrXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string pbstrError {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void IsStrongPasswordCompletedEventHandler(object sender, IsStrongPasswordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsStrongPasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsStrongPasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ChangePasswordCompletedEventHandler(object sender, ChangePasswordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChangePasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ChangePasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string pbstrError {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ValidateDigestAuthCompletedEventHandler(object sender, ValidateDigestAuthCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ValidateDigestAuthCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ValidateDigestAuthCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public short Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((short)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string pbstrError {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AuthorizeAPIResellerCompletedEventHandler(object sender, AuthorizeAPIResellerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AuthorizeAPIResellerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AuthorizeAPIResellerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string pbstrError {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ValidatePINCompletedEventHandler(object sender, ValidatePINCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ValidatePINCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ValidatePINCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string pbstrError {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void RetrievePINCompletedEventHandler(object sender, RetrievePINCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrievePINCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RetrievePINCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string pbstrPIN {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string pbstrError {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
}

#pragma warning restore 1591