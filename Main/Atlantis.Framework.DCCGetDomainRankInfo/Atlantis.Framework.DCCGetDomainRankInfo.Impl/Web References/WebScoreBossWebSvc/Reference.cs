//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.1.
// 
#pragma warning disable 1591

namespace Atlantis.Framework.DCCGetDomainRankInfo.Impl.WebScoreBossWebSvc {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="WebScoreBossWebSvcSoap", Namespace="http://webscore/webscorebosswebsvc/")]
    public partial class WebScoreBossWebSvc : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetRankInfoForDomainIdsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMessageByLookupIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetOldestMessagesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetQueueCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRealTimeQueueCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertRequestOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRequestsByDomainIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRequestByIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRequestByIdExOperationCompleted;
        
        private System.Threading.SendOrPostCallback CancelRequestsByDomainIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback CancelRequestByIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback WebSvcHealthCheckOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public WebScoreBossWebSvc() {
            this.Url = global::Atlantis.Framework.DCCGetDomainRankInfo.Impl.Properties.Settings.Default.Atlantis_Framework_DCCGetDomainRankInfo_Impl_WebScoreBossWebSvc_WebScoreBossWebSvc;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetRankInfoForDomainIdsCompletedEventHandler GetRankInfoForDomainIdsCompleted;
        
        /// <remarks/>
        public event SendMessageCompletedEventHandler SendMessageCompleted;
        
        /// <remarks/>
        public event GetMessageByLookupIdCompletedEventHandler GetMessageByLookupIdCompleted;
        
        /// <remarks/>
        public event RemoveMessageCompletedEventHandler RemoveMessageCompleted;
        
        /// <remarks/>
        public event GetOldestMessagesCompletedEventHandler GetOldestMessagesCompleted;
        
        /// <remarks/>
        public event GetQueueCountCompletedEventHandler GetQueueCountCompleted;
        
        /// <remarks/>
        public event GetRealTimeQueueCountCompletedEventHandler GetRealTimeQueueCountCompleted;
        
        /// <remarks/>
        public event InsertRequestCompletedEventHandler InsertRequestCompleted;
        
        /// <remarks/>
        public event GetRequestsByDomainIdCompletedEventHandler GetRequestsByDomainIdCompleted;
        
        /// <remarks/>
        public event GetRequestByIdCompletedEventHandler GetRequestByIdCompleted;
        
        /// <remarks/>
        public event GetRequestByIdExCompletedEventHandler GetRequestByIdExCompleted;
        
        /// <remarks/>
        public event CancelRequestsByDomainIdCompletedEventHandler CancelRequestsByDomainIdCompleted;
        
        /// <remarks/>
        public event CancelRequestByIdCompletedEventHandler CancelRequestByIdCompleted;
        
        /// <remarks/>
        public event WebSvcHealthCheckCompletedEventHandler WebSvcHealthCheckCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webscore/webscorebosswebsvc/GetRankInfoForDomainIds", RequestNamespace="http://webscore/webscorebosswebsvc/", ResponseNamespace="http://webscore/webscorebosswebsvc/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetRankInfoForDomainIds(string xmlRequest) {
            object[] results = this.Invoke("GetRankInfoForDomainIds", new object[] {
                        xmlRequest});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetRankInfoForDomainIds(string xmlRequest, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetRankInfoForDomainIds", new object[] {
                        xmlRequest}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetRankInfoForDomainIds(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetRankInfoForDomainIdsAsync(string xmlRequest) {
            this.GetRankInfoForDomainIdsAsync(xmlRequest, null);
        }
        
        /// <remarks/>
        public void GetRankInfoForDomainIdsAsync(string xmlRequest, object userState) {
            if ((this.GetRankInfoForDomainIdsOperationCompleted == null)) {
                this.GetRankInfoForDomainIdsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRankInfoForDomainIdsOperationCompleted);
            }
            this.InvokeAsync("GetRankInfoForDomainIds", new object[] {
                        xmlRequest}, this.GetRankInfoForDomainIdsOperationCompleted, userState);
        }
        
        private void OnGetRankInfoForDomainIdsOperationCompleted(object arg) {
            if ((this.GetRankInfoForDomainIdsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRankInfoForDomainIdsCompleted(this, new GetRankInfoForDomainIdsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webscore/webscorebosswebsvc/SendMessage", RequestNamespace="http://webscore/webscorebosswebsvc/", ResponseNamespace="http://webscore/webscorebosswebsvc/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SendMessage(string callingApplicationName, string xml, string label, string queueNickName) {
            object[] results = this.Invoke("SendMessage", new object[] {
                        callingApplicationName,
                        xml,
                        label,
                        queueNickName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSendMessage(string callingApplicationName, string xml, string label, string queueNickName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SendMessage", new object[] {
                        callingApplicationName,
                        xml,
                        label,
                        queueNickName}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndSendMessage(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SendMessageAsync(string callingApplicationName, string xml, string label, string queueNickName) {
            this.SendMessageAsync(callingApplicationName, xml, label, queueNickName, null);
        }
        
        /// <remarks/>
        public void SendMessageAsync(string callingApplicationName, string xml, string label, string queueNickName, object userState) {
            if ((this.SendMessageOperationCompleted == null)) {
                this.SendMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendMessageOperationCompleted);
            }
            this.InvokeAsync("SendMessage", new object[] {
                        callingApplicationName,
                        xml,
                        label,
                        queueNickName}, this.SendMessageOperationCompleted, userState);
        }
        
        private void OnSendMessageOperationCompleted(object arg) {
            if ((this.SendMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendMessageCompleted(this, new SendMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webscore/webscorebosswebsvc/GetMessageByLookupId", RequestNamespace="http://webscore/webscorebosswebsvc/", ResponseNamespace="http://webscore/webscorebosswebsvc/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetMessageByLookupId(string callingApplicationName, long lookupId, string username, string queueNickName) {
            object[] results = this.Invoke("GetMessageByLookupId", new object[] {
                        callingApplicationName,
                        lookupId,
                        username,
                        queueNickName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetMessageByLookupId(string callingApplicationName, long lookupId, string username, string queueNickName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetMessageByLookupId", new object[] {
                        callingApplicationName,
                        lookupId,
                        username,
                        queueNickName}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetMessageByLookupId(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetMessageByLookupIdAsync(string callingApplicationName, long lookupId, string username, string queueNickName) {
            this.GetMessageByLookupIdAsync(callingApplicationName, lookupId, username, queueNickName, null);
        }
        
        /// <remarks/>
        public void GetMessageByLookupIdAsync(string callingApplicationName, long lookupId, string username, string queueNickName, object userState) {
            if ((this.GetMessageByLookupIdOperationCompleted == null)) {
                this.GetMessageByLookupIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMessageByLookupIdOperationCompleted);
            }
            this.InvokeAsync("GetMessageByLookupId", new object[] {
                        callingApplicationName,
                        lookupId,
                        username,
                        queueNickName}, this.GetMessageByLookupIdOperationCompleted, userState);
        }
        
        private void OnGetMessageByLookupIdOperationCompleted(object arg) {
            if ((this.GetMessageByLookupIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMessageByLookupIdCompleted(this, new GetMessageByLookupIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webscore/webscorebosswebsvc/RemoveMessage", RequestNamespace="http://webscore/webscorebosswebsvc/", ResponseNamespace="http://webscore/webscorebosswebsvc/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string RemoveMessage(string callingApplicationName, long lookupId, string username, string queueNickName) {
            object[] results = this.Invoke("RemoveMessage", new object[] {
                        callingApplicationName,
                        lookupId,
                        username,
                        queueNickName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRemoveMessage(string callingApplicationName, long lookupId, string username, string queueNickName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RemoveMessage", new object[] {
                        callingApplicationName,
                        lookupId,
                        username,
                        queueNickName}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndRemoveMessage(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RemoveMessageAsync(string callingApplicationName, long lookupId, string username, string queueNickName) {
            this.RemoveMessageAsync(callingApplicationName, lookupId, username, queueNickName, null);
        }
        
        /// <remarks/>
        public void RemoveMessageAsync(string callingApplicationName, long lookupId, string username, string queueNickName, object userState) {
            if ((this.RemoveMessageOperationCompleted == null)) {
                this.RemoveMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveMessageOperationCompleted);
            }
            this.InvokeAsync("RemoveMessage", new object[] {
                        callingApplicationName,
                        lookupId,
                        username,
                        queueNickName}, this.RemoveMessageOperationCompleted, userState);
        }
        
        private void OnRemoveMessageOperationCompleted(object arg) {
            if ((this.RemoveMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveMessageCompleted(this, new RemoveMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webscore/webscorebosswebsvc/GetOldestMessages", RequestNamespace="http://webscore/webscorebosswebsvc/", ResponseNamespace="http://webscore/webscorebosswebsvc/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetOldestMessages(string callingApplicationName, string username, long count, string queueNickName) {
            object[] results = this.Invoke("GetOldestMessages", new object[] {
                        callingApplicationName,
                        username,
                        count,
                        queueNickName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetOldestMessages(string callingApplicationName, string username, long count, string queueNickName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetOldestMessages", new object[] {
                        callingApplicationName,
                        username,
                        count,
                        queueNickName}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetOldestMessages(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetOldestMessagesAsync(string callingApplicationName, string username, long count, string queueNickName) {
            this.GetOldestMessagesAsync(callingApplicationName, username, count, queueNickName, null);
        }
        
        /// <remarks/>
        public void GetOldestMessagesAsync(string callingApplicationName, string username, long count, string queueNickName, object userState) {
            if ((this.GetOldestMessagesOperationCompleted == null)) {
                this.GetOldestMessagesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOldestMessagesOperationCompleted);
            }
            this.InvokeAsync("GetOldestMessages", new object[] {
                        callingApplicationName,
                        username,
                        count,
                        queueNickName}, this.GetOldestMessagesOperationCompleted, userState);
        }
        
        private void OnGetOldestMessagesOperationCompleted(object arg) {
            if ((this.GetOldestMessagesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOldestMessagesCompleted(this, new GetOldestMessagesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webscore/webscorebosswebsvc/GetQueueCount", RequestNamespace="http://webscore/webscorebosswebsvc/", ResponseNamespace="http://webscore/webscorebosswebsvc/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetQueueCount(string callingApplicationName, string queueNickName) {
            object[] results = this.Invoke("GetQueueCount", new object[] {
                        callingApplicationName,
                        queueNickName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetQueueCount(string callingApplicationName, string queueNickName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetQueueCount", new object[] {
                        callingApplicationName,
                        queueNickName}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetQueueCount(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetQueueCountAsync(string callingApplicationName, string queueNickName) {
            this.GetQueueCountAsync(callingApplicationName, queueNickName, null);
        }
        
        /// <remarks/>
        public void GetQueueCountAsync(string callingApplicationName, string queueNickName, object userState) {
            if ((this.GetQueueCountOperationCompleted == null)) {
                this.GetQueueCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetQueueCountOperationCompleted);
            }
            this.InvokeAsync("GetQueueCount", new object[] {
                        callingApplicationName,
                        queueNickName}, this.GetQueueCountOperationCompleted, userState);
        }
        
        private void OnGetQueueCountOperationCompleted(object arg) {
            if ((this.GetQueueCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetQueueCountCompleted(this, new GetQueueCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webscore/webscorebosswebsvc/GetRealTimeQueueCount", RequestNamespace="http://webscore/webscorebosswebsvc/", ResponseNamespace="http://webscore/webscorebosswebsvc/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetRealTimeQueueCount(string callingApplicationName, string queueNickName) {
            object[] results = this.Invoke("GetRealTimeQueueCount", new object[] {
                        callingApplicationName,
                        queueNickName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetRealTimeQueueCount(string callingApplicationName, string queueNickName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetRealTimeQueueCount", new object[] {
                        callingApplicationName,
                        queueNickName}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetRealTimeQueueCount(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetRealTimeQueueCountAsync(string callingApplicationName, string queueNickName) {
            this.GetRealTimeQueueCountAsync(callingApplicationName, queueNickName, null);
        }
        
        /// <remarks/>
        public void GetRealTimeQueueCountAsync(string callingApplicationName, string queueNickName, object userState) {
            if ((this.GetRealTimeQueueCountOperationCompleted == null)) {
                this.GetRealTimeQueueCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRealTimeQueueCountOperationCompleted);
            }
            this.InvokeAsync("GetRealTimeQueueCount", new object[] {
                        callingApplicationName,
                        queueNickName}, this.GetRealTimeQueueCountOperationCompleted, userState);
        }
        
        private void OnGetRealTimeQueueCountOperationCompleted(object arg) {
            if ((this.GetRealTimeQueueCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRealTimeQueueCountCompleted(this, new GetRealTimeQueueCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webscore/webscorebosswebsvc/InsertRequest", RequestNamespace="http://webscore/webscorebosswebsvc/", ResponseNamespace="http://webscore/webscorebosswebsvc/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string InsertRequest(string callingApplicationName, string shopperId, long domainId, string domainName, int requestTypeCode) {
            object[] results = this.Invoke("InsertRequest", new object[] {
                        callingApplicationName,
                        shopperId,
                        domainId,
                        domainName,
                        requestTypeCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginInsertRequest(string callingApplicationName, string shopperId, long domainId, string domainName, int requestTypeCode, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("InsertRequest", new object[] {
                        callingApplicationName,
                        shopperId,
                        domainId,
                        domainName,
                        requestTypeCode}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndInsertRequest(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void InsertRequestAsync(string callingApplicationName, string shopperId, long domainId, string domainName, int requestTypeCode) {
            this.InsertRequestAsync(callingApplicationName, shopperId, domainId, domainName, requestTypeCode, null);
        }
        
        /// <remarks/>
        public void InsertRequestAsync(string callingApplicationName, string shopperId, long domainId, string domainName, int requestTypeCode, object userState) {
            if ((this.InsertRequestOperationCompleted == null)) {
                this.InsertRequestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertRequestOperationCompleted);
            }
            this.InvokeAsync("InsertRequest", new object[] {
                        callingApplicationName,
                        shopperId,
                        domainId,
                        domainName,
                        requestTypeCode}, this.InsertRequestOperationCompleted, userState);
        }
        
        private void OnInsertRequestOperationCompleted(object arg) {
            if ((this.InsertRequestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertRequestCompleted(this, new InsertRequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webscore/webscorebosswebsvc/GetRequestsByDomainId", RequestNamespace="http://webscore/webscorebosswebsvc/", ResponseNamespace="http://webscore/webscorebosswebsvc/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetRequestsByDomainId(string callingApplicationName, long domainId, int howMany) {
            object[] results = this.Invoke("GetRequestsByDomainId", new object[] {
                        callingApplicationName,
                        domainId,
                        howMany});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetRequestsByDomainId(string callingApplicationName, long domainId, int howMany, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetRequestsByDomainId", new object[] {
                        callingApplicationName,
                        domainId,
                        howMany}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetRequestsByDomainId(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetRequestsByDomainIdAsync(string callingApplicationName, long domainId, int howMany) {
            this.GetRequestsByDomainIdAsync(callingApplicationName, domainId, howMany, null);
        }
        
        /// <remarks/>
        public void GetRequestsByDomainIdAsync(string callingApplicationName, long domainId, int howMany, object userState) {
            if ((this.GetRequestsByDomainIdOperationCompleted == null)) {
                this.GetRequestsByDomainIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRequestsByDomainIdOperationCompleted);
            }
            this.InvokeAsync("GetRequestsByDomainId", new object[] {
                        callingApplicationName,
                        domainId,
                        howMany}, this.GetRequestsByDomainIdOperationCompleted, userState);
        }
        
        private void OnGetRequestsByDomainIdOperationCompleted(object arg) {
            if ((this.GetRequestsByDomainIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRequestsByDomainIdCompleted(this, new GetRequestsByDomainIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webscore/webscorebosswebsvc/GetRequestById", RequestNamespace="http://webscore/webscorebosswebsvc/", ResponseNamespace="http://webscore/webscorebosswebsvc/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetRequestById(string callingApplicationName, long requestId) {
            object[] results = this.Invoke("GetRequestById", new object[] {
                        callingApplicationName,
                        requestId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetRequestById(string callingApplicationName, long requestId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetRequestById", new object[] {
                        callingApplicationName,
                        requestId}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetRequestById(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetRequestByIdAsync(string callingApplicationName, long requestId) {
            this.GetRequestByIdAsync(callingApplicationName, requestId, null);
        }
        
        /// <remarks/>
        public void GetRequestByIdAsync(string callingApplicationName, long requestId, object userState) {
            if ((this.GetRequestByIdOperationCompleted == null)) {
                this.GetRequestByIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRequestByIdOperationCompleted);
            }
            this.InvokeAsync("GetRequestById", new object[] {
                        callingApplicationName,
                        requestId}, this.GetRequestByIdOperationCompleted, userState);
        }
        
        private void OnGetRequestByIdOperationCompleted(object arg) {
            if ((this.GetRequestByIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRequestByIdCompleted(this, new GetRequestByIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webscore/webscorebosswebsvc/GetRequestByIdEx", RequestNamespace="http://webscore/webscorebosswebsvc/", ResponseNamespace="http://webscore/webscorebosswebsvc/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetRequestByIdEx(string callingApplicationName, long requestId, bool generateXmlIfMissing) {
            object[] results = this.Invoke("GetRequestByIdEx", new object[] {
                        callingApplicationName,
                        requestId,
                        generateXmlIfMissing});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetRequestByIdEx(string callingApplicationName, long requestId, bool generateXmlIfMissing, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetRequestByIdEx", new object[] {
                        callingApplicationName,
                        requestId,
                        generateXmlIfMissing}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetRequestByIdEx(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetRequestByIdExAsync(string callingApplicationName, long requestId, bool generateXmlIfMissing) {
            this.GetRequestByIdExAsync(callingApplicationName, requestId, generateXmlIfMissing, null);
        }
        
        /// <remarks/>
        public void GetRequestByIdExAsync(string callingApplicationName, long requestId, bool generateXmlIfMissing, object userState) {
            if ((this.GetRequestByIdExOperationCompleted == null)) {
                this.GetRequestByIdExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRequestByIdExOperationCompleted);
            }
            this.InvokeAsync("GetRequestByIdEx", new object[] {
                        callingApplicationName,
                        requestId,
                        generateXmlIfMissing}, this.GetRequestByIdExOperationCompleted, userState);
        }
        
        private void OnGetRequestByIdExOperationCompleted(object arg) {
            if ((this.GetRequestByIdExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRequestByIdExCompleted(this, new GetRequestByIdExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webscore/webscorebosswebsvc/CancelRequestsByDomainId", RequestNamespace="http://webscore/webscorebosswebsvc/", ResponseNamespace="http://webscore/webscorebosswebsvc/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CancelRequestsByDomainId(string callingApplicationName, long domainId) {
            object[] results = this.Invoke("CancelRequestsByDomainId", new object[] {
                        callingApplicationName,
                        domainId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCancelRequestsByDomainId(string callingApplicationName, long domainId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CancelRequestsByDomainId", new object[] {
                        callingApplicationName,
                        domainId}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndCancelRequestsByDomainId(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CancelRequestsByDomainIdAsync(string callingApplicationName, long domainId) {
            this.CancelRequestsByDomainIdAsync(callingApplicationName, domainId, null);
        }
        
        /// <remarks/>
        public void CancelRequestsByDomainIdAsync(string callingApplicationName, long domainId, object userState) {
            if ((this.CancelRequestsByDomainIdOperationCompleted == null)) {
                this.CancelRequestsByDomainIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelRequestsByDomainIdOperationCompleted);
            }
            this.InvokeAsync("CancelRequestsByDomainId", new object[] {
                        callingApplicationName,
                        domainId}, this.CancelRequestsByDomainIdOperationCompleted, userState);
        }
        
        private void OnCancelRequestsByDomainIdOperationCompleted(object arg) {
            if ((this.CancelRequestsByDomainIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CancelRequestsByDomainIdCompleted(this, new CancelRequestsByDomainIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webscore/webscorebosswebsvc/CancelRequestById", RequestNamespace="http://webscore/webscorebosswebsvc/", ResponseNamespace="http://webscore/webscorebosswebsvc/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CancelRequestById(string callingApplicationName, long requestId) {
            object[] results = this.Invoke("CancelRequestById", new object[] {
                        callingApplicationName,
                        requestId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCancelRequestById(string callingApplicationName, long requestId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CancelRequestById", new object[] {
                        callingApplicationName,
                        requestId}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndCancelRequestById(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CancelRequestByIdAsync(string callingApplicationName, long requestId) {
            this.CancelRequestByIdAsync(callingApplicationName, requestId, null);
        }
        
        /// <remarks/>
        public void CancelRequestByIdAsync(string callingApplicationName, long requestId, object userState) {
            if ((this.CancelRequestByIdOperationCompleted == null)) {
                this.CancelRequestByIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelRequestByIdOperationCompleted);
            }
            this.InvokeAsync("CancelRequestById", new object[] {
                        callingApplicationName,
                        requestId}, this.CancelRequestByIdOperationCompleted, userState);
        }
        
        private void OnCancelRequestByIdOperationCompleted(object arg) {
            if ((this.CancelRequestByIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CancelRequestByIdCompleted(this, new CancelRequestByIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://webscore/webscorebosswebsvc/WebSvcHealthCheck", RequestNamespace="http://webscore/webscorebosswebsvc/", ResponseNamespace="http://webscore/webscorebosswebsvc/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string WebSvcHealthCheck(string callingApplicationName) {
            object[] results = this.Invoke("WebSvcHealthCheck", new object[] {
                        callingApplicationName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginWebSvcHealthCheck(string callingApplicationName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("WebSvcHealthCheck", new object[] {
                        callingApplicationName}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndWebSvcHealthCheck(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void WebSvcHealthCheckAsync(string callingApplicationName) {
            this.WebSvcHealthCheckAsync(callingApplicationName, null);
        }
        
        /// <remarks/>
        public void WebSvcHealthCheckAsync(string callingApplicationName, object userState) {
            if ((this.WebSvcHealthCheckOperationCompleted == null)) {
                this.WebSvcHealthCheckOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWebSvcHealthCheckOperationCompleted);
            }
            this.InvokeAsync("WebSvcHealthCheck", new object[] {
                        callingApplicationName}, this.WebSvcHealthCheckOperationCompleted, userState);
        }
        
        private void OnWebSvcHealthCheckOperationCompleted(object arg) {
            if ((this.WebSvcHealthCheckCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.WebSvcHealthCheckCompleted(this, new WebSvcHealthCheckCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetRankInfoForDomainIdsCompletedEventHandler(object sender, GetRankInfoForDomainIdsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRankInfoForDomainIdsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRankInfoForDomainIdsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SendMessageCompletedEventHandler(object sender, SendMessageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetMessageByLookupIdCompletedEventHandler(object sender, GetMessageByLookupIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMessageByLookupIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMessageByLookupIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void RemoveMessageCompletedEventHandler(object sender, RemoveMessageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoveMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoveMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetOldestMessagesCompletedEventHandler(object sender, GetOldestMessagesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOldestMessagesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetOldestMessagesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetQueueCountCompletedEventHandler(object sender, GetQueueCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetQueueCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetQueueCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetRealTimeQueueCountCompletedEventHandler(object sender, GetRealTimeQueueCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRealTimeQueueCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRealTimeQueueCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void InsertRequestCompletedEventHandler(object sender, InsertRequestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertRequestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertRequestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetRequestsByDomainIdCompletedEventHandler(object sender, GetRequestsByDomainIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRequestsByDomainIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRequestsByDomainIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetRequestByIdCompletedEventHandler(object sender, GetRequestByIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRequestByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRequestByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetRequestByIdExCompletedEventHandler(object sender, GetRequestByIdExCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRequestByIdExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRequestByIdExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CancelRequestsByDomainIdCompletedEventHandler(object sender, CancelRequestsByDomainIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CancelRequestsByDomainIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CancelRequestsByDomainIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CancelRequestByIdCompletedEventHandler(object sender, CancelRequestByIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CancelRequestByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CancelRequestByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void WebSvcHealthCheckCompletedEventHandler(object sender, WebSvcHealthCheckCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class WebSvcHealthCheckCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal WebSvcHealthCheckCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591