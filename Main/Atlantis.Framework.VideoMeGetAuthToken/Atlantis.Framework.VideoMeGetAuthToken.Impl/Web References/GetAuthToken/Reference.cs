//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.1.
// 
#pragma warning disable 1591

namespace Atlantis.Framework.VideoMeGetAuthToken.Impl.GetAuthToken {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="BasicHttpBinding_IVideoMeExternalService", Namespace="http://tempuri.org/")]
    public partial class VideoMeExternalService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetOneTimeAuthTokenOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetVideoResultOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetVideoResultsOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteVideoOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public VideoMeExternalService() {
            this.Url = global::Atlantis.Framework.VideoMeGetAuthToken.Impl.Properties.Settings.Default.Atlantis_Framework_VideoMeGetAuthToken_Impl_GetAuthToken_VideoMeExternalService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetOneTimeAuthTokenCompletedEventHandler GetOneTimeAuthTokenCompleted;
        
        /// <remarks/>
        public event GetVideoResultCompletedEventHandler GetVideoResultCompleted;
        
        /// <remarks/>
        public event GetVideoResultsCompletedEventHandler GetVideoResultsCompleted;
        
        /// <remarks/>
        public event DeleteVideoCompletedEventHandler DeleteVideoCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.video.me/externalService/1.0/IVideoMeExternalService/GetOneTimeAuthTok" +
            "en", RequestNamespace="http://www.video.me/externalService/1.0", ResponseNamespace="http://www.video.me/externalService/1.0", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string GetOneTimeAuthToken(int applicationId, [System.Xml.Serialization.XmlIgnoreAttribute()] bool applicationIdSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string fileUniqueId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string accessKeyId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string secretKey) {
            object[] results = this.Invoke("GetOneTimeAuthToken", new object[] {
                        applicationId,
                        applicationIdSpecified,
                        fileUniqueId,
                        accessKeyId,
                        secretKey});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetOneTimeAuthTokenAsync(int applicationId, bool applicationIdSpecified, string fileUniqueId, string accessKeyId, string secretKey) {
            this.GetOneTimeAuthTokenAsync(applicationId, applicationIdSpecified, fileUniqueId, accessKeyId, secretKey, null);
        }
        
        /// <remarks/>
        public void GetOneTimeAuthTokenAsync(int applicationId, bool applicationIdSpecified, string fileUniqueId, string accessKeyId, string secretKey, object userState) {
            if ((this.GetOneTimeAuthTokenOperationCompleted == null)) {
                this.GetOneTimeAuthTokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOneTimeAuthTokenOperationCompleted);
            }
            this.InvokeAsync("GetOneTimeAuthToken", new object[] {
                        applicationId,
                        applicationIdSpecified,
                        fileUniqueId,
                        accessKeyId,
                        secretKey}, this.GetOneTimeAuthTokenOperationCompleted, userState);
        }
        
        private void OnGetOneTimeAuthTokenOperationCompleted(object arg) {
            if ((this.GetOneTimeAuthTokenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOneTimeAuthTokenCompleted(this, new GetOneTimeAuthTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.video.me/externalService/1.0/IVideoMeExternalService/GetVideoResult", RequestNamespace="http://www.video.me/externalService/1.0", ResponseNamespace="http://www.video.me/externalService/1.0", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string GetVideoResult(int applicationId, [System.Xml.Serialization.XmlIgnoreAttribute()] bool applicationIdSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string fileUniqueId) {
            object[] results = this.Invoke("GetVideoResult", new object[] {
                        applicationId,
                        applicationIdSpecified,
                        fileUniqueId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetVideoResultAsync(int applicationId, bool applicationIdSpecified, string fileUniqueId) {
            this.GetVideoResultAsync(applicationId, applicationIdSpecified, fileUniqueId, null);
        }
        
        /// <remarks/>
        public void GetVideoResultAsync(int applicationId, bool applicationIdSpecified, string fileUniqueId, object userState) {
            if ((this.GetVideoResultOperationCompleted == null)) {
                this.GetVideoResultOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetVideoResultOperationCompleted);
            }
            this.InvokeAsync("GetVideoResult", new object[] {
                        applicationId,
                        applicationIdSpecified,
                        fileUniqueId}, this.GetVideoResultOperationCompleted, userState);
        }
        
        private void OnGetVideoResultOperationCompleted(object arg) {
            if ((this.GetVideoResultCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetVideoResultCompleted(this, new GetVideoResultCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.video.me/externalService/1.0/IVideoMeExternalService/GetVideoResults", RequestNamespace="http://www.video.me/externalService/1.0", ResponseNamespace="http://www.video.me/externalService/1.0", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string GetVideoResults(int applicationId, [System.Xml.Serialization.XmlIgnoreAttribute()] bool applicationIdSpecified, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")] string[] fileUniqueIds) {
            object[] results = this.Invoke("GetVideoResults", new object[] {
                        applicationId,
                        applicationIdSpecified,
                        fileUniqueIds});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetVideoResultsAsync(int applicationId, bool applicationIdSpecified, string[] fileUniqueIds) {
            this.GetVideoResultsAsync(applicationId, applicationIdSpecified, fileUniqueIds, null);
        }
        
        /// <remarks/>
        public void GetVideoResultsAsync(int applicationId, bool applicationIdSpecified, string[] fileUniqueIds, object userState) {
            if ((this.GetVideoResultsOperationCompleted == null)) {
                this.GetVideoResultsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetVideoResultsOperationCompleted);
            }
            this.InvokeAsync("GetVideoResults", new object[] {
                        applicationId,
                        applicationIdSpecified,
                        fileUniqueIds}, this.GetVideoResultsOperationCompleted, userState);
        }
        
        private void OnGetVideoResultsOperationCompleted(object arg) {
            if ((this.GetVideoResultsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetVideoResultsCompleted(this, new GetVideoResultsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.video.me/externalService/1.0/IVideoMeExternalService/DeleteVideo", RequestNamespace="http://www.video.me/externalService/1.0", ResponseNamespace="http://www.video.me/externalService/1.0", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteVideo(int applicationId, [System.Xml.Serialization.XmlIgnoreAttribute()] bool applicationIdSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string fileUniqueId) {
            this.Invoke("DeleteVideo", new object[] {
                        applicationId,
                        applicationIdSpecified,
                        fileUniqueId});
        }
        
        /// <remarks/>
        public void DeleteVideoAsync(int applicationId, bool applicationIdSpecified, string fileUniqueId) {
            this.DeleteVideoAsync(applicationId, applicationIdSpecified, fileUniqueId, null);
        }
        
        /// <remarks/>
        public void DeleteVideoAsync(int applicationId, bool applicationIdSpecified, string fileUniqueId, object userState) {
            if ((this.DeleteVideoOperationCompleted == null)) {
                this.DeleteVideoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteVideoOperationCompleted);
            }
            this.InvokeAsync("DeleteVideo", new object[] {
                        applicationId,
                        applicationIdSpecified,
                        fileUniqueId}, this.DeleteVideoOperationCompleted, userState);
        }
        
        private void OnDeleteVideoOperationCompleted(object arg) {
            if ((this.DeleteVideoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteVideoCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetOneTimeAuthTokenCompletedEventHandler(object sender, GetOneTimeAuthTokenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOneTimeAuthTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetOneTimeAuthTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetVideoResultCompletedEventHandler(object sender, GetVideoResultCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetVideoResultCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetVideoResultCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetVideoResultsCompletedEventHandler(object sender, GetVideoResultsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetVideoResultsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetVideoResultsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void DeleteVideoCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591