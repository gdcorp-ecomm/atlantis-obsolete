//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.1.
// 
#pragma warning disable 1591

namespace Atlantis.Framework.DCCGetAppTrusteeInfoByDomainId.Impl.AppTrusteeInfoWS {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="RegCheckDomainStatusWebSvcServiceSoap", Namespace="urn:RegCheckDomainStatusWebSvcService")]
    public partial class RegCheckDomainStatusWebSvcService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback HelloWorldOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckDomainStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDomainInfoByNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDomainInfoByIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDomainInfoByNameWithContactsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SearchMiniDCCDomainsOperationCompleted;
        
        private System.Threading.SendOrPostCallback VerifyPremiumDomainForFraudOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReleasePremiumDomainForFraudOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDomainStatusCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRedemptionListByShopperIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDomainPrivateLabelIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetNameserverInfoByDomainNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdatePendingDomainStatusForDnsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetNameserverInfoByDomainNameAndShopperIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetCertifiedDomainStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsDomainMobilizedOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsPrivacyAllowedOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsCancellableOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckRegistrationPeriodOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCertifiableDomainsListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDCCDomainListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDCCTransfersInProgressOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckRenewalPeriodOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetExpirationDomainCountsByShopperIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetApplicationTrusteeInfoByBillingResourceIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetApplicationTrusteeInfoByDomainIdOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public RegCheckDomainStatusWebSvcService() {
            this.Url = global::Atlantis.Framework.DCCGetAppTrusteeInfoByDomainId.Impl.Properties.Settings.Default.Atlantis_Framework_DCCGetAppTrusteeInfoByDomainId_Impl_AppTrusteeInfoWS_RegCheckDomainStatusWebSvcService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event HelloWorldCompletedEventHandler HelloWorldCompleted;
        
        /// <remarks/>
        public event CheckDomainStatusCompletedEventHandler CheckDomainStatusCompleted;
        
        /// <remarks/>
        public event GetDomainInfoByNameCompletedEventHandler GetDomainInfoByNameCompleted;
        
        /// <remarks/>
        public event GetDomainInfoByIDCompletedEventHandler GetDomainInfoByIDCompleted;
        
        /// <remarks/>
        public event GetDomainInfoByNameWithContactsCompletedEventHandler GetDomainInfoByNameWithContactsCompleted;
        
        /// <remarks/>
        public event SearchMiniDCCDomainsCompletedEventHandler SearchMiniDCCDomainsCompleted;
        
        /// <remarks/>
        public event VerifyPremiumDomainForFraudCompletedEventHandler VerifyPremiumDomainForFraudCompleted;
        
        /// <remarks/>
        public event ReleasePremiumDomainForFraudCompletedEventHandler ReleasePremiumDomainForFraudCompleted;
        
        /// <remarks/>
        public event GetDomainStatusCountCompletedEventHandler GetDomainStatusCountCompleted;
        
        /// <remarks/>
        public event GetRedemptionListByShopperIdCompletedEventHandler GetRedemptionListByShopperIdCompleted;
        
        /// <remarks/>
        public event GetDomainPrivateLabelIdCompletedEventHandler GetDomainPrivateLabelIdCompleted;
        
        /// <remarks/>
        public event GetNameserverInfoByDomainNameCompletedEventHandler GetNameserverInfoByDomainNameCompleted;
        
        /// <remarks/>
        public event UpdatePendingDomainStatusForDnsCompletedEventHandler UpdatePendingDomainStatusForDnsCompleted;
        
        /// <remarks/>
        public event GetNameserverInfoByDomainNameAndShopperIdCompletedEventHandler GetNameserverInfoByDomainNameAndShopperIdCompleted;
        
        /// <remarks/>
        public event SetCertifiedDomainStatusCompletedEventHandler SetCertifiedDomainStatusCompleted;
        
        /// <remarks/>
        public event IsDomainMobilizedCompletedEventHandler IsDomainMobilizedCompleted;
        
        /// <remarks/>
        public event IsPrivacyAllowedCompletedEventHandler IsPrivacyAllowedCompleted;
        
        /// <remarks/>
        public event IsCancellableCompletedEventHandler IsCancellableCompleted;
        
        /// <remarks/>
        public event CheckRegistrationPeriodCompletedEventHandler CheckRegistrationPeriodCompleted;
        
        /// <remarks/>
        public event GetCertifiableDomainsListCompletedEventHandler GetCertifiableDomainsListCompleted;
        
        /// <remarks/>
        public event GetDCCDomainListCompletedEventHandler GetDCCDomainListCompleted;
        
        /// <remarks/>
        public event GetDCCTransfersInProgressCompletedEventHandler GetDCCTransfersInProgressCompleted;
        
        /// <remarks/>
        public event CheckRenewalPeriodCompletedEventHandler CheckRenewalPeriodCompleted;
        
        /// <remarks/>
        public event GetExpirationDomainCountsByShopperIdCompletedEventHandler GetExpirationDomainCountsByShopperIdCompleted;
        
        /// <remarks/>
        public event GetApplicationTrusteeInfoByBillingResourceIdCompletedEventHandler GetApplicationTrusteeInfoByBillingResourceIdCompleted;
        
        /// <remarks/>
        public event GetApplicationTrusteeInfoByDomainIdCompletedEventHandler GetApplicationTrusteeInfoByDomainIdCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("#HelloWorld", RequestNamespace="urn:RegCheckDomainStatusWebSvcService", ResponseNamespace="urn:RegCheckDomainStatusWebSvcService")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string HelloWorld(string bstrInput) {
            object[] results = this.Invoke("HelloWorld", new object[] {
                        bstrInput});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginHelloWorld(string bstrInput, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("HelloWorld", new object[] {
                        bstrInput}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndHelloWorld(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void HelloWorldAsync(string bstrInput) {
            this.HelloWorldAsync(bstrInput, null);
        }
        
        /// <remarks/>
        public void HelloWorldAsync(string bstrInput, object userState) {
            if ((this.HelloWorldOperationCompleted == null)) {
                this.HelloWorldOperationCompleted = new System.Threading.SendOrPostCallback(this.OnHelloWorldOperationCompleted);
            }
            this.InvokeAsync("HelloWorld", new object[] {
                        bstrInput}, this.HelloWorldOperationCompleted, userState);
        }
        
        private void OnHelloWorldOperationCompleted(object arg) {
            if ((this.HelloWorldCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.HelloWorldCompleted(this, new HelloWorldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("#CheckDomainStatus", RequestNamespace="urn:RegCheckDomainStatusWebSvcService", ResponseNamespace="urn:RegCheckDomainStatusWebSvcService")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string CheckDomainStatus(string requestXml) {
            object[] results = this.Invoke("CheckDomainStatus", new object[] {
                        requestXml});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCheckDomainStatus(string requestXml, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CheckDomainStatus", new object[] {
                        requestXml}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndCheckDomainStatus(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CheckDomainStatusAsync(string requestXml) {
            this.CheckDomainStatusAsync(requestXml, null);
        }
        
        /// <remarks/>
        public void CheckDomainStatusAsync(string requestXml, object userState) {
            if ((this.CheckDomainStatusOperationCompleted == null)) {
                this.CheckDomainStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckDomainStatusOperationCompleted);
            }
            this.InvokeAsync("CheckDomainStatus", new object[] {
                        requestXml}, this.CheckDomainStatusOperationCompleted, userState);
        }
        
        private void OnCheckDomainStatusOperationCompleted(object arg) {
            if ((this.CheckDomainStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckDomainStatusCompleted(this, new CheckDomainStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("#GetDomainInfoByName", RequestNamespace="urn:RegCheckDomainStatusWebSvcService", ResponseNamespace="urn:RegCheckDomainStatusWebSvcService")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string GetDomainInfoByName(string requestXml) {
            object[] results = this.Invoke("GetDomainInfoByName", new object[] {
                        requestXml});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetDomainInfoByName(string requestXml, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetDomainInfoByName", new object[] {
                        requestXml}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetDomainInfoByName(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDomainInfoByNameAsync(string requestXml) {
            this.GetDomainInfoByNameAsync(requestXml, null);
        }
        
        /// <remarks/>
        public void GetDomainInfoByNameAsync(string requestXml, object userState) {
            if ((this.GetDomainInfoByNameOperationCompleted == null)) {
                this.GetDomainInfoByNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDomainInfoByNameOperationCompleted);
            }
            this.InvokeAsync("GetDomainInfoByName", new object[] {
                        requestXml}, this.GetDomainInfoByNameOperationCompleted, userState);
        }
        
        private void OnGetDomainInfoByNameOperationCompleted(object arg) {
            if ((this.GetDomainInfoByNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDomainInfoByNameCompleted(this, new GetDomainInfoByNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("#GetDomainInfoByID", RequestNamespace="urn:RegCheckDomainStatusWebSvcService", ResponseNamespace="urn:RegCheckDomainStatusWebSvcService")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string GetDomainInfoByID(string requestXml) {
            object[] results = this.Invoke("GetDomainInfoByID", new object[] {
                        requestXml});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetDomainInfoByID(string requestXml, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetDomainInfoByID", new object[] {
                        requestXml}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetDomainInfoByID(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDomainInfoByIDAsync(string requestXml) {
            this.GetDomainInfoByIDAsync(requestXml, null);
        }
        
        /// <remarks/>
        public void GetDomainInfoByIDAsync(string requestXml, object userState) {
            if ((this.GetDomainInfoByIDOperationCompleted == null)) {
                this.GetDomainInfoByIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDomainInfoByIDOperationCompleted);
            }
            this.InvokeAsync("GetDomainInfoByID", new object[] {
                        requestXml}, this.GetDomainInfoByIDOperationCompleted, userState);
        }
        
        private void OnGetDomainInfoByIDOperationCompleted(object arg) {
            if ((this.GetDomainInfoByIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDomainInfoByIDCompleted(this, new GetDomainInfoByIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("#GetDomainInfoByNameWithContacts", RequestNamespace="urn:RegCheckDomainStatusWebSvcService", ResponseNamespace="urn:RegCheckDomainStatusWebSvcService")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string GetDomainInfoByNameWithContacts(string requestXml) {
            object[] results = this.Invoke("GetDomainInfoByNameWithContacts", new object[] {
                        requestXml});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetDomainInfoByNameWithContacts(string requestXml, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetDomainInfoByNameWithContacts", new object[] {
                        requestXml}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetDomainInfoByNameWithContacts(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDomainInfoByNameWithContactsAsync(string requestXml) {
            this.GetDomainInfoByNameWithContactsAsync(requestXml, null);
        }
        
        /// <remarks/>
        public void GetDomainInfoByNameWithContactsAsync(string requestXml, object userState) {
            if ((this.GetDomainInfoByNameWithContactsOperationCompleted == null)) {
                this.GetDomainInfoByNameWithContactsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDomainInfoByNameWithContactsOperationCompleted);
            }
            this.InvokeAsync("GetDomainInfoByNameWithContacts", new object[] {
                        requestXml}, this.GetDomainInfoByNameWithContactsOperationCompleted, userState);
        }
        
        private void OnGetDomainInfoByNameWithContactsOperationCompleted(object arg) {
            if ((this.GetDomainInfoByNameWithContactsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDomainInfoByNameWithContactsCompleted(this, new GetDomainInfoByNameWithContactsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("#SearchMiniDCCDomains", RequestNamespace="urn:RegCheckDomainStatusWebSvcService", ResponseNamespace="urn:RegCheckDomainStatusWebSvcService")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string SearchMiniDCCDomains(string requestXml) {
            object[] results = this.Invoke("SearchMiniDCCDomains", new object[] {
                        requestXml});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSearchMiniDCCDomains(string requestXml, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SearchMiniDCCDomains", new object[] {
                        requestXml}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndSearchMiniDCCDomains(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SearchMiniDCCDomainsAsync(string requestXml) {
            this.SearchMiniDCCDomainsAsync(requestXml, null);
        }
        
        /// <remarks/>
        public void SearchMiniDCCDomainsAsync(string requestXml, object userState) {
            if ((this.SearchMiniDCCDomainsOperationCompleted == null)) {
                this.SearchMiniDCCDomainsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSearchMiniDCCDomainsOperationCompleted);
            }
            this.InvokeAsync("SearchMiniDCCDomains", new object[] {
                        requestXml}, this.SearchMiniDCCDomainsOperationCompleted, userState);
        }
        
        private void OnSearchMiniDCCDomainsOperationCompleted(object arg) {
            if ((this.SearchMiniDCCDomainsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SearchMiniDCCDomainsCompleted(this, new SearchMiniDCCDomainsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("#VerifyPremiumDomainForFraud", RequestNamespace="urn:RegCheckDomainStatusWebSvcService", ResponseNamespace="urn:RegCheckDomainStatusWebSvcService")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string VerifyPremiumDomainForFraud(string requestXml) {
            object[] results = this.Invoke("VerifyPremiumDomainForFraud", new object[] {
                        requestXml});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginVerifyPremiumDomainForFraud(string requestXml, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("VerifyPremiumDomainForFraud", new object[] {
                        requestXml}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndVerifyPremiumDomainForFraud(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void VerifyPremiumDomainForFraudAsync(string requestXml) {
            this.VerifyPremiumDomainForFraudAsync(requestXml, null);
        }
        
        /// <remarks/>
        public void VerifyPremiumDomainForFraudAsync(string requestXml, object userState) {
            if ((this.VerifyPremiumDomainForFraudOperationCompleted == null)) {
                this.VerifyPremiumDomainForFraudOperationCompleted = new System.Threading.SendOrPostCallback(this.OnVerifyPremiumDomainForFraudOperationCompleted);
            }
            this.InvokeAsync("VerifyPremiumDomainForFraud", new object[] {
                        requestXml}, this.VerifyPremiumDomainForFraudOperationCompleted, userState);
        }
        
        private void OnVerifyPremiumDomainForFraudOperationCompleted(object arg) {
            if ((this.VerifyPremiumDomainForFraudCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.VerifyPremiumDomainForFraudCompleted(this, new VerifyPremiumDomainForFraudCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("#ReleasePremiumDomainForFraud", RequestNamespace="urn:RegCheckDomainStatusWebSvcService", ResponseNamespace="urn:RegCheckDomainStatusWebSvcService")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string ReleasePremiumDomainForFraud(string requestXml) {
            object[] results = this.Invoke("ReleasePremiumDomainForFraud", new object[] {
                        requestXml});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginReleasePremiumDomainForFraud(string requestXml, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ReleasePremiumDomainForFraud", new object[] {
                        requestXml}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndReleasePremiumDomainForFraud(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ReleasePremiumDomainForFraudAsync(string requestXml) {
            this.ReleasePremiumDomainForFraudAsync(requestXml, null);
        }
        
        /// <remarks/>
        public void ReleasePremiumDomainForFraudAsync(string requestXml, object userState) {
            if ((this.ReleasePremiumDomainForFraudOperationCompleted == null)) {
                this.ReleasePremiumDomainForFraudOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReleasePremiumDomainForFraudOperationCompleted);
            }
            this.InvokeAsync("ReleasePremiumDomainForFraud", new object[] {
                        requestXml}, this.ReleasePremiumDomainForFraudOperationCompleted, userState);
        }
        
        private void OnReleasePremiumDomainForFraudOperationCompleted(object arg) {
            if ((this.ReleasePremiumDomainForFraudCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReleasePremiumDomainForFraudCompleted(this, new ReleasePremiumDomainForFraudCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("#GetDomainStatusCount", RequestNamespace="urn:RegCheckDomainStatusWebSvcService", ResponseNamespace="urn:RegCheckDomainStatusWebSvcService")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string GetDomainStatusCount(string requestXml) {
            object[] results = this.Invoke("GetDomainStatusCount", new object[] {
                        requestXml});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetDomainStatusCount(string requestXml, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetDomainStatusCount", new object[] {
                        requestXml}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetDomainStatusCount(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDomainStatusCountAsync(string requestXml) {
            this.GetDomainStatusCountAsync(requestXml, null);
        }
        
        /// <remarks/>
        public void GetDomainStatusCountAsync(string requestXml, object userState) {
            if ((this.GetDomainStatusCountOperationCompleted == null)) {
                this.GetDomainStatusCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDomainStatusCountOperationCompleted);
            }
            this.InvokeAsync("GetDomainStatusCount", new object[] {
                        requestXml}, this.GetDomainStatusCountOperationCompleted, userState);
        }
        
        private void OnGetDomainStatusCountOperationCompleted(object arg) {
            if ((this.GetDomainStatusCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDomainStatusCountCompleted(this, new GetDomainStatusCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("#GetRedemptionListByShopperId", RequestNamespace="urn:RegCheckDomainStatusWebSvcService", ResponseNamespace="urn:RegCheckDomainStatusWebSvcService")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string GetRedemptionListByShopperId(string requestXml) {
            object[] results = this.Invoke("GetRedemptionListByShopperId", new object[] {
                        requestXml});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetRedemptionListByShopperId(string requestXml, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetRedemptionListByShopperId", new object[] {
                        requestXml}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetRedemptionListByShopperId(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetRedemptionListByShopperIdAsync(string requestXml) {
            this.GetRedemptionListByShopperIdAsync(requestXml, null);
        }
        
        /// <remarks/>
        public void GetRedemptionListByShopperIdAsync(string requestXml, object userState) {
            if ((this.GetRedemptionListByShopperIdOperationCompleted == null)) {
                this.GetRedemptionListByShopperIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRedemptionListByShopperIdOperationCompleted);
            }
            this.InvokeAsync("GetRedemptionListByShopperId", new object[] {
                        requestXml}, this.GetRedemptionListByShopperIdOperationCompleted, userState);
        }
        
        private void OnGetRedemptionListByShopperIdOperationCompleted(object arg) {
            if ((this.GetRedemptionListByShopperIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRedemptionListByShopperIdCompleted(this, new GetRedemptionListByShopperIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("#GetDomainPrivateLabelId", RequestNamespace="urn:RegCheckDomainStatusWebSvcService", ResponseNamespace="urn:RegCheckDomainStatusWebSvcService")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string GetDomainPrivateLabelId(string requestXml) {
            object[] results = this.Invoke("GetDomainPrivateLabelId", new object[] {
                        requestXml});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetDomainPrivateLabelId(string requestXml, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetDomainPrivateLabelId", new object[] {
                        requestXml}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetDomainPrivateLabelId(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDomainPrivateLabelIdAsync(string requestXml) {
            this.GetDomainPrivateLabelIdAsync(requestXml, null);
        }
        
        /// <remarks/>
        public void GetDomainPrivateLabelIdAsync(string requestXml, object userState) {
            if ((this.GetDomainPrivateLabelIdOperationCompleted == null)) {
                this.GetDomainPrivateLabelIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDomainPrivateLabelIdOperationCompleted);
            }
            this.InvokeAsync("GetDomainPrivateLabelId", new object[] {
                        requestXml}, this.GetDomainPrivateLabelIdOperationCompleted, userState);
        }
        
        private void OnGetDomainPrivateLabelIdOperationCompleted(object arg) {
            if ((this.GetDomainPrivateLabelIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDomainPrivateLabelIdCompleted(this, new GetDomainPrivateLabelIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("#GetNameserverInfoByDomainName", RequestNamespace="urn:RegCheckDomainStatusWebSvcService", ResponseNamespace="urn:RegCheckDomainStatusWebSvcService")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string GetNameserverInfoByDomainName(string requestXml) {
            object[] results = this.Invoke("GetNameserverInfoByDomainName", new object[] {
                        requestXml});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetNameserverInfoByDomainName(string requestXml, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetNameserverInfoByDomainName", new object[] {
                        requestXml}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetNameserverInfoByDomainName(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetNameserverInfoByDomainNameAsync(string requestXml) {
            this.GetNameserverInfoByDomainNameAsync(requestXml, null);
        }
        
        /// <remarks/>
        public void GetNameserverInfoByDomainNameAsync(string requestXml, object userState) {
            if ((this.GetNameserverInfoByDomainNameOperationCompleted == null)) {
                this.GetNameserverInfoByDomainNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetNameserverInfoByDomainNameOperationCompleted);
            }
            this.InvokeAsync("GetNameserverInfoByDomainName", new object[] {
                        requestXml}, this.GetNameserverInfoByDomainNameOperationCompleted, userState);
        }
        
        private void OnGetNameserverInfoByDomainNameOperationCompleted(object arg) {
            if ((this.GetNameserverInfoByDomainNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetNameserverInfoByDomainNameCompleted(this, new GetNameserverInfoByDomainNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("#UpdatePendingDomainStatusForDns", RequestNamespace="urn:RegCheckDomainStatusWebSvcService", ResponseNamespace="urn:RegCheckDomainStatusWebSvcService")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string UpdatePendingDomainStatusForDns(string requestXml) {
            object[] results = this.Invoke("UpdatePendingDomainStatusForDns", new object[] {
                        requestXml});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdatePendingDomainStatusForDns(string requestXml, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdatePendingDomainStatusForDns", new object[] {
                        requestXml}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndUpdatePendingDomainStatusForDns(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpdatePendingDomainStatusForDnsAsync(string requestXml) {
            this.UpdatePendingDomainStatusForDnsAsync(requestXml, null);
        }
        
        /// <remarks/>
        public void UpdatePendingDomainStatusForDnsAsync(string requestXml, object userState) {
            if ((this.UpdatePendingDomainStatusForDnsOperationCompleted == null)) {
                this.UpdatePendingDomainStatusForDnsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdatePendingDomainStatusForDnsOperationCompleted);
            }
            this.InvokeAsync("UpdatePendingDomainStatusForDns", new object[] {
                        requestXml}, this.UpdatePendingDomainStatusForDnsOperationCompleted, userState);
        }
        
        private void OnUpdatePendingDomainStatusForDnsOperationCompleted(object arg) {
            if ((this.UpdatePendingDomainStatusForDnsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdatePendingDomainStatusForDnsCompleted(this, new UpdatePendingDomainStatusForDnsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("#GetNameserverInfoByDomainNameAndShopperId", RequestNamespace="urn:RegCheckDomainStatusWebSvcService", ResponseNamespace="urn:RegCheckDomainStatusWebSvcService")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string GetNameserverInfoByDomainNameAndShopperId(string requestXml) {
            object[] results = this.Invoke("GetNameserverInfoByDomainNameAndShopperId", new object[] {
                        requestXml});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetNameserverInfoByDomainNameAndShopperId(string requestXml, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetNameserverInfoByDomainNameAndShopperId", new object[] {
                        requestXml}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetNameserverInfoByDomainNameAndShopperId(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetNameserverInfoByDomainNameAndShopperIdAsync(string requestXml) {
            this.GetNameserverInfoByDomainNameAndShopperIdAsync(requestXml, null);
        }
        
        /// <remarks/>
        public void GetNameserverInfoByDomainNameAndShopperIdAsync(string requestXml, object userState) {
            if ((this.GetNameserverInfoByDomainNameAndShopperIdOperationCompleted == null)) {
                this.GetNameserverInfoByDomainNameAndShopperIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetNameserverInfoByDomainNameAndShopperIdOperationCompleted);
            }
            this.InvokeAsync("GetNameserverInfoByDomainNameAndShopperId", new object[] {
                        requestXml}, this.GetNameserverInfoByDomainNameAndShopperIdOperationCompleted, userState);
        }
        
        private void OnGetNameserverInfoByDomainNameAndShopperIdOperationCompleted(object arg) {
            if ((this.GetNameserverInfoByDomainNameAndShopperIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetNameserverInfoByDomainNameAndShopperIdCompleted(this, new GetNameserverInfoByDomainNameAndShopperIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("#SetCertifiedDomainStatus", RequestNamespace="urn:RegCheckDomainStatusWebSvcService", ResponseNamespace="urn:RegCheckDomainStatusWebSvcService")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string SetCertifiedDomainStatus(string requestXml) {
            object[] results = this.Invoke("SetCertifiedDomainStatus", new object[] {
                        requestXml});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSetCertifiedDomainStatus(string requestXml, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SetCertifiedDomainStatus", new object[] {
                        requestXml}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndSetCertifiedDomainStatus(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SetCertifiedDomainStatusAsync(string requestXml) {
            this.SetCertifiedDomainStatusAsync(requestXml, null);
        }
        
        /// <remarks/>
        public void SetCertifiedDomainStatusAsync(string requestXml, object userState) {
            if ((this.SetCertifiedDomainStatusOperationCompleted == null)) {
                this.SetCertifiedDomainStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetCertifiedDomainStatusOperationCompleted);
            }
            this.InvokeAsync("SetCertifiedDomainStatus", new object[] {
                        requestXml}, this.SetCertifiedDomainStatusOperationCompleted, userState);
        }
        
        private void OnSetCertifiedDomainStatusOperationCompleted(object arg) {
            if ((this.SetCertifiedDomainStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetCertifiedDomainStatusCompleted(this, new SetCertifiedDomainStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("#IsDomainMobilized", RequestNamespace="urn:RegCheckDomainStatusWebSvcService", ResponseNamespace="urn:RegCheckDomainStatusWebSvcService")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string IsDomainMobilized(string requestXml) {
            object[] results = this.Invoke("IsDomainMobilized", new object[] {
                        requestXml});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginIsDomainMobilized(string requestXml, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("IsDomainMobilized", new object[] {
                        requestXml}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndIsDomainMobilized(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void IsDomainMobilizedAsync(string requestXml) {
            this.IsDomainMobilizedAsync(requestXml, null);
        }
        
        /// <remarks/>
        public void IsDomainMobilizedAsync(string requestXml, object userState) {
            if ((this.IsDomainMobilizedOperationCompleted == null)) {
                this.IsDomainMobilizedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsDomainMobilizedOperationCompleted);
            }
            this.InvokeAsync("IsDomainMobilized", new object[] {
                        requestXml}, this.IsDomainMobilizedOperationCompleted, userState);
        }
        
        private void OnIsDomainMobilizedOperationCompleted(object arg) {
            if ((this.IsDomainMobilizedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsDomainMobilizedCompleted(this, new IsDomainMobilizedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("#IsPrivacyAllowed", RequestNamespace="urn:RegCheckDomainStatusWebSvcService", ResponseNamespace="urn:RegCheckDomainStatusWebSvcService")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string IsPrivacyAllowed(string requestXml) {
            object[] results = this.Invoke("IsPrivacyAllowed", new object[] {
                        requestXml});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginIsPrivacyAllowed(string requestXml, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("IsPrivacyAllowed", new object[] {
                        requestXml}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndIsPrivacyAllowed(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void IsPrivacyAllowedAsync(string requestXml) {
            this.IsPrivacyAllowedAsync(requestXml, null);
        }
        
        /// <remarks/>
        public void IsPrivacyAllowedAsync(string requestXml, object userState) {
            if ((this.IsPrivacyAllowedOperationCompleted == null)) {
                this.IsPrivacyAllowedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsPrivacyAllowedOperationCompleted);
            }
            this.InvokeAsync("IsPrivacyAllowed", new object[] {
                        requestXml}, this.IsPrivacyAllowedOperationCompleted, userState);
        }
        
        private void OnIsPrivacyAllowedOperationCompleted(object arg) {
            if ((this.IsPrivacyAllowedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsPrivacyAllowedCompleted(this, new IsPrivacyAllowedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("#IsCancellable", RequestNamespace="urn:RegCheckDomainStatusWebSvcService", ResponseNamespace="urn:RegCheckDomainStatusWebSvcService")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string IsCancellable(string requestXml) {
            object[] results = this.Invoke("IsCancellable", new object[] {
                        requestXml});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginIsCancellable(string requestXml, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("IsCancellable", new object[] {
                        requestXml}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndIsCancellable(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void IsCancellableAsync(string requestXml) {
            this.IsCancellableAsync(requestXml, null);
        }
        
        /// <remarks/>
        public void IsCancellableAsync(string requestXml, object userState) {
            if ((this.IsCancellableOperationCompleted == null)) {
                this.IsCancellableOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsCancellableOperationCompleted);
            }
            this.InvokeAsync("IsCancellable", new object[] {
                        requestXml}, this.IsCancellableOperationCompleted, userState);
        }
        
        private void OnIsCancellableOperationCompleted(object arg) {
            if ((this.IsCancellableCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsCancellableCompleted(this, new IsCancellableCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("#CheckRegistrationPeriod", RequestNamespace="urn:RegCheckDomainStatusWebSvcService", ResponseNamespace="urn:RegCheckDomainStatusWebSvcService")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string CheckRegistrationPeriod(string requestXml) {
            object[] results = this.Invoke("CheckRegistrationPeriod", new object[] {
                        requestXml});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCheckRegistrationPeriod(string requestXml, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CheckRegistrationPeriod", new object[] {
                        requestXml}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndCheckRegistrationPeriod(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CheckRegistrationPeriodAsync(string requestXml) {
            this.CheckRegistrationPeriodAsync(requestXml, null);
        }
        
        /// <remarks/>
        public void CheckRegistrationPeriodAsync(string requestXml, object userState) {
            if ((this.CheckRegistrationPeriodOperationCompleted == null)) {
                this.CheckRegistrationPeriodOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckRegistrationPeriodOperationCompleted);
            }
            this.InvokeAsync("CheckRegistrationPeriod", new object[] {
                        requestXml}, this.CheckRegistrationPeriodOperationCompleted, userState);
        }
        
        private void OnCheckRegistrationPeriodOperationCompleted(object arg) {
            if ((this.CheckRegistrationPeriodCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckRegistrationPeriodCompleted(this, new CheckRegistrationPeriodCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("#GetCertifiableDomainsList", RequestNamespace="urn:RegCheckDomainStatusWebSvcService", ResponseNamespace="urn:RegCheckDomainStatusWebSvcService")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string GetCertifiableDomainsList(string requestXml) {
            object[] results = this.Invoke("GetCertifiableDomainsList", new object[] {
                        requestXml});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetCertifiableDomainsList(string requestXml, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetCertifiableDomainsList", new object[] {
                        requestXml}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetCertifiableDomainsList(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCertifiableDomainsListAsync(string requestXml) {
            this.GetCertifiableDomainsListAsync(requestXml, null);
        }
        
        /// <remarks/>
        public void GetCertifiableDomainsListAsync(string requestXml, object userState) {
            if ((this.GetCertifiableDomainsListOperationCompleted == null)) {
                this.GetCertifiableDomainsListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCertifiableDomainsListOperationCompleted);
            }
            this.InvokeAsync("GetCertifiableDomainsList", new object[] {
                        requestXml}, this.GetCertifiableDomainsListOperationCompleted, userState);
        }
        
        private void OnGetCertifiableDomainsListOperationCompleted(object arg) {
            if ((this.GetCertifiableDomainsListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCertifiableDomainsListCompleted(this, new GetCertifiableDomainsListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("#GetDCCDomainList", RequestNamespace="urn:RegCheckDomainStatusWebSvcService", ResponseNamespace="urn:RegCheckDomainStatusWebSvcService")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string GetDCCDomainList(string requestXml) {
            object[] results = this.Invoke("GetDCCDomainList", new object[] {
                        requestXml});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetDCCDomainList(string requestXml, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetDCCDomainList", new object[] {
                        requestXml}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetDCCDomainList(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDCCDomainListAsync(string requestXml) {
            this.GetDCCDomainListAsync(requestXml, null);
        }
        
        /// <remarks/>
        public void GetDCCDomainListAsync(string requestXml, object userState) {
            if ((this.GetDCCDomainListOperationCompleted == null)) {
                this.GetDCCDomainListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDCCDomainListOperationCompleted);
            }
            this.InvokeAsync("GetDCCDomainList", new object[] {
                        requestXml}, this.GetDCCDomainListOperationCompleted, userState);
        }
        
        private void OnGetDCCDomainListOperationCompleted(object arg) {
            if ((this.GetDCCDomainListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDCCDomainListCompleted(this, new GetDCCDomainListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("#GetDCCTransfersInProgress", RequestNamespace="urn:RegCheckDomainStatusWebSvcService", ResponseNamespace="urn:RegCheckDomainStatusWebSvcService")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string GetDCCTransfersInProgress(string requestXml) {
            object[] results = this.Invoke("GetDCCTransfersInProgress", new object[] {
                        requestXml});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetDCCTransfersInProgress(string requestXml, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetDCCTransfersInProgress", new object[] {
                        requestXml}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetDCCTransfersInProgress(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDCCTransfersInProgressAsync(string requestXml) {
            this.GetDCCTransfersInProgressAsync(requestXml, null);
        }
        
        /// <remarks/>
        public void GetDCCTransfersInProgressAsync(string requestXml, object userState) {
            if ((this.GetDCCTransfersInProgressOperationCompleted == null)) {
                this.GetDCCTransfersInProgressOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDCCTransfersInProgressOperationCompleted);
            }
            this.InvokeAsync("GetDCCTransfersInProgress", new object[] {
                        requestXml}, this.GetDCCTransfersInProgressOperationCompleted, userState);
        }
        
        private void OnGetDCCTransfersInProgressOperationCompleted(object arg) {
            if ((this.GetDCCTransfersInProgressCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDCCTransfersInProgressCompleted(this, new GetDCCTransfersInProgressCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("#CheckRenewalPeriod", RequestNamespace="urn:RegCheckDomainStatusWebSvcService", ResponseNamespace="urn:RegCheckDomainStatusWebSvcService")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string CheckRenewalPeriod(string requestXml) {
            object[] results = this.Invoke("CheckRenewalPeriod", new object[] {
                        requestXml});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCheckRenewalPeriod(string requestXml, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CheckRenewalPeriod", new object[] {
                        requestXml}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndCheckRenewalPeriod(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CheckRenewalPeriodAsync(string requestXml) {
            this.CheckRenewalPeriodAsync(requestXml, null);
        }
        
        /// <remarks/>
        public void CheckRenewalPeriodAsync(string requestXml, object userState) {
            if ((this.CheckRenewalPeriodOperationCompleted == null)) {
                this.CheckRenewalPeriodOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckRenewalPeriodOperationCompleted);
            }
            this.InvokeAsync("CheckRenewalPeriod", new object[] {
                        requestXml}, this.CheckRenewalPeriodOperationCompleted, userState);
        }
        
        private void OnCheckRenewalPeriodOperationCompleted(object arg) {
            if ((this.CheckRenewalPeriodCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckRenewalPeriodCompleted(this, new CheckRenewalPeriodCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("#GetExpirationDomainCountsByShopperId", RequestNamespace="urn:RegCheckDomainStatusWebSvcService", ResponseNamespace="urn:RegCheckDomainStatusWebSvcService")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string GetExpirationDomainCountsByShopperId(string requestXml) {
            object[] results = this.Invoke("GetExpirationDomainCountsByShopperId", new object[] {
                        requestXml});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetExpirationDomainCountsByShopperId(string requestXml, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetExpirationDomainCountsByShopperId", new object[] {
                        requestXml}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetExpirationDomainCountsByShopperId(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetExpirationDomainCountsByShopperIdAsync(string requestXml) {
            this.GetExpirationDomainCountsByShopperIdAsync(requestXml, null);
        }
        
        /// <remarks/>
        public void GetExpirationDomainCountsByShopperIdAsync(string requestXml, object userState) {
            if ((this.GetExpirationDomainCountsByShopperIdOperationCompleted == null)) {
                this.GetExpirationDomainCountsByShopperIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetExpirationDomainCountsByShopperIdOperationCompleted);
            }
            this.InvokeAsync("GetExpirationDomainCountsByShopperId", new object[] {
                        requestXml}, this.GetExpirationDomainCountsByShopperIdOperationCompleted, userState);
        }
        
        private void OnGetExpirationDomainCountsByShopperIdOperationCompleted(object arg) {
            if ((this.GetExpirationDomainCountsByShopperIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetExpirationDomainCountsByShopperIdCompleted(this, new GetExpirationDomainCountsByShopperIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("#GetApplicationTrusteeInfoByBillingResourceId", RequestNamespace="urn:RegCheckDomainStatusWebSvcService", ResponseNamespace="urn:RegCheckDomainStatusWebSvcService")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string GetApplicationTrusteeInfoByBillingResourceId(string requestXml) {
            object[] results = this.Invoke("GetApplicationTrusteeInfoByBillingResourceId", new object[] {
                        requestXml});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetApplicationTrusteeInfoByBillingResourceId(string requestXml, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetApplicationTrusteeInfoByBillingResourceId", new object[] {
                        requestXml}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetApplicationTrusteeInfoByBillingResourceId(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetApplicationTrusteeInfoByBillingResourceIdAsync(string requestXml) {
            this.GetApplicationTrusteeInfoByBillingResourceIdAsync(requestXml, null);
        }
        
        /// <remarks/>
        public void GetApplicationTrusteeInfoByBillingResourceIdAsync(string requestXml, object userState) {
            if ((this.GetApplicationTrusteeInfoByBillingResourceIdOperationCompleted == null)) {
                this.GetApplicationTrusteeInfoByBillingResourceIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetApplicationTrusteeInfoByBillingResourceIdOperationCompleted);
            }
            this.InvokeAsync("GetApplicationTrusteeInfoByBillingResourceId", new object[] {
                        requestXml}, this.GetApplicationTrusteeInfoByBillingResourceIdOperationCompleted, userState);
        }
        
        private void OnGetApplicationTrusteeInfoByBillingResourceIdOperationCompleted(object arg) {
            if ((this.GetApplicationTrusteeInfoByBillingResourceIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetApplicationTrusteeInfoByBillingResourceIdCompleted(this, new GetApplicationTrusteeInfoByBillingResourceIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("#GetApplicationTrusteeInfoByDomainId", RequestNamespace="urn:RegCheckDomainStatusWebSvcService", ResponseNamespace="urn:RegCheckDomainStatusWebSvcService")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string GetApplicationTrusteeInfoByDomainId(string requestXml) {
            object[] results = this.Invoke("GetApplicationTrusteeInfoByDomainId", new object[] {
                        requestXml});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetApplicationTrusteeInfoByDomainId(string requestXml, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetApplicationTrusteeInfoByDomainId", new object[] {
                        requestXml}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetApplicationTrusteeInfoByDomainId(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetApplicationTrusteeInfoByDomainIdAsync(string requestXml) {
            this.GetApplicationTrusteeInfoByDomainIdAsync(requestXml, null);
        }
        
        /// <remarks/>
        public void GetApplicationTrusteeInfoByDomainIdAsync(string requestXml, object userState) {
            if ((this.GetApplicationTrusteeInfoByDomainIdOperationCompleted == null)) {
                this.GetApplicationTrusteeInfoByDomainIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetApplicationTrusteeInfoByDomainIdOperationCompleted);
            }
            this.InvokeAsync("GetApplicationTrusteeInfoByDomainId", new object[] {
                        requestXml}, this.GetApplicationTrusteeInfoByDomainIdOperationCompleted, userState);
        }
        
        private void OnGetApplicationTrusteeInfoByDomainIdOperationCompleted(object arg) {
            if ((this.GetApplicationTrusteeInfoByDomainIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetApplicationTrusteeInfoByDomainIdCompleted(this, new GetApplicationTrusteeInfoByDomainIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void HelloWorldCompletedEventHandler(object sender, HelloWorldCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HelloWorldCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal HelloWorldCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CheckDomainStatusCompletedEventHandler(object sender, CheckDomainStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckDomainStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckDomainStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetDomainInfoByNameCompletedEventHandler(object sender, GetDomainInfoByNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDomainInfoByNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDomainInfoByNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetDomainInfoByIDCompletedEventHandler(object sender, GetDomainInfoByIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDomainInfoByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDomainInfoByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetDomainInfoByNameWithContactsCompletedEventHandler(object sender, GetDomainInfoByNameWithContactsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDomainInfoByNameWithContactsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDomainInfoByNameWithContactsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SearchMiniDCCDomainsCompletedEventHandler(object sender, SearchMiniDCCDomainsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SearchMiniDCCDomainsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SearchMiniDCCDomainsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void VerifyPremiumDomainForFraudCompletedEventHandler(object sender, VerifyPremiumDomainForFraudCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class VerifyPremiumDomainForFraudCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal VerifyPremiumDomainForFraudCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ReleasePremiumDomainForFraudCompletedEventHandler(object sender, ReleasePremiumDomainForFraudCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReleasePremiumDomainForFraudCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReleasePremiumDomainForFraudCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetDomainStatusCountCompletedEventHandler(object sender, GetDomainStatusCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDomainStatusCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDomainStatusCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetRedemptionListByShopperIdCompletedEventHandler(object sender, GetRedemptionListByShopperIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRedemptionListByShopperIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRedemptionListByShopperIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetDomainPrivateLabelIdCompletedEventHandler(object sender, GetDomainPrivateLabelIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDomainPrivateLabelIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDomainPrivateLabelIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetNameserverInfoByDomainNameCompletedEventHandler(object sender, GetNameserverInfoByDomainNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetNameserverInfoByDomainNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetNameserverInfoByDomainNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UpdatePendingDomainStatusForDnsCompletedEventHandler(object sender, UpdatePendingDomainStatusForDnsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdatePendingDomainStatusForDnsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdatePendingDomainStatusForDnsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetNameserverInfoByDomainNameAndShopperIdCompletedEventHandler(object sender, GetNameserverInfoByDomainNameAndShopperIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetNameserverInfoByDomainNameAndShopperIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetNameserverInfoByDomainNameAndShopperIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SetCertifiedDomainStatusCompletedEventHandler(object sender, SetCertifiedDomainStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetCertifiedDomainStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetCertifiedDomainStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void IsDomainMobilizedCompletedEventHandler(object sender, IsDomainMobilizedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsDomainMobilizedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsDomainMobilizedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void IsPrivacyAllowedCompletedEventHandler(object sender, IsPrivacyAllowedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsPrivacyAllowedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsPrivacyAllowedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void IsCancellableCompletedEventHandler(object sender, IsCancellableCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsCancellableCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsCancellableCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CheckRegistrationPeriodCompletedEventHandler(object sender, CheckRegistrationPeriodCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckRegistrationPeriodCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckRegistrationPeriodCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetCertifiableDomainsListCompletedEventHandler(object sender, GetCertifiableDomainsListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCertifiableDomainsListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCertifiableDomainsListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetDCCDomainListCompletedEventHandler(object sender, GetDCCDomainListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDCCDomainListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDCCDomainListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetDCCTransfersInProgressCompletedEventHandler(object sender, GetDCCTransfersInProgressCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDCCTransfersInProgressCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDCCTransfersInProgressCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CheckRenewalPeriodCompletedEventHandler(object sender, CheckRenewalPeriodCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckRenewalPeriodCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckRenewalPeriodCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetExpirationDomainCountsByShopperIdCompletedEventHandler(object sender, GetExpirationDomainCountsByShopperIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetExpirationDomainCountsByShopperIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetExpirationDomainCountsByShopperIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetApplicationTrusteeInfoByBillingResourceIdCompletedEventHandler(object sender, GetApplicationTrusteeInfoByBillingResourceIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetApplicationTrusteeInfoByBillingResourceIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetApplicationTrusteeInfoByBillingResourceIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetApplicationTrusteeInfoByDomainIdCompletedEventHandler(object sender, GetApplicationTrusteeInfoByDomainIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetApplicationTrusteeInfoByDomainIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetApplicationTrusteeInfoByDomainIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591