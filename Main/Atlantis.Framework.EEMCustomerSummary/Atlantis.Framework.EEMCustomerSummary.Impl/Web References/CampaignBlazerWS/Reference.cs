//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.239.
// 
#pragma warning disable 1591

namespace Atlantis.Framework.EEMGetCustomerSummary.Impl.CampaignBlazerWS {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="CampaignBlazerSoap", Namespace="http://ecm.com/webservices/")]
    public partial class CampaignBlazer : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetAuthenticationGuidOperationCompleted;
        
        private System.Threading.SendOrPostCallback ResetOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateNewAccountOperationCompleted;
        
        private System.Threading.SendOrPostCallback ResellerOptInOperationCompleted;
        
        private System.Threading.SendOrPostCallback ResellerOptOutOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateNewCustomerOperationCompleted;
        
        private System.Threading.SendOrPostCallback RenewAccountOperationCompleted;
        
        private System.Threading.SendOrPostCallback RenewCustomerOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateCustomerOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveCustomerOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCustomerIdNamePairsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCustomerInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCustomerSummaryOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecCreateNewInternalCustomerOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecRemoveInternalCustomerOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecAccountOptInOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecAccountOptOutOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecDoesSubscriberExistOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecDoesInternalCustomerExistOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public CampaignBlazer() {
            this.Url = global::Atlantis.Framework.EEMGetCustomerSummary.Impl.Properties.Settings.Default.Atlantis_Framework_EEMCustomerSummary_Impl_CampaignBlazerWS_CampaignBlazer;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetAuthenticationGuidCompletedEventHandler GetAuthenticationGuidCompleted;
        
        /// <remarks/>
        public event ResetCompletedEventHandler ResetCompleted;
        
        /// <remarks/>
        public event CreateNewAccountCompletedEventHandler CreateNewAccountCompleted;
        
        /// <remarks/>
        public event ResellerOptInCompletedEventHandler ResellerOptInCompleted;
        
        /// <remarks/>
        public event ResellerOptOutCompletedEventHandler ResellerOptOutCompleted;
        
        /// <remarks/>
        public event CreateNewCustomerCompletedEventHandler CreateNewCustomerCompleted;
        
        /// <remarks/>
        public event RenewAccountCompletedEventHandler RenewAccountCompleted;
        
        /// <remarks/>
        public event RenewCustomerCompletedEventHandler RenewCustomerCompleted;
        
        /// <remarks/>
        public event UpdateCustomerCompletedEventHandler UpdateCustomerCompleted;
        
        /// <remarks/>
        public event RemoveCustomerCompletedEventHandler RemoveCustomerCompleted;
        
        /// <remarks/>
        public event GetCustomerIdNamePairsCompletedEventHandler GetCustomerIdNamePairsCompleted;
        
        /// <remarks/>
        public event GetCustomerInfoCompletedEventHandler GetCustomerInfoCompleted;
        
        /// <remarks/>
        public event GetCustomerSummaryCompletedEventHandler GetCustomerSummaryCompleted;
        
        /// <remarks/>
        public event ExecCreateNewInternalCustomerCompletedEventHandler ExecCreateNewInternalCustomerCompleted;
        
        /// <remarks/>
        public event ExecRemoveInternalCustomerCompletedEventHandler ExecRemoveInternalCustomerCompleted;
        
        /// <remarks/>
        public event ExecAccountOptInCompletedEventHandler ExecAccountOptInCompleted;
        
        /// <remarks/>
        public event ExecAccountOptOutCompletedEventHandler ExecAccountOptOutCompleted;
        
        /// <remarks/>
        public event ExecDoesSubscriberExistCompletedEventHandler ExecDoesSubscriberExistCompleted;
        
        /// <remarks/>
        public event ExecDoesInternalCustomerExistCompletedEventHandler ExecDoesInternalCustomerExistCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecm.com/webservices/GetAuthenticationGuid", RequestNamespace="http://ecm.com/webservices/", ResponseNamespace="http://ecm.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAuthenticationGuid(int customerId) {
            object[] results = this.Invoke("GetAuthenticationGuid", new object[] {
                        customerId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAuthenticationGuidAsync(int customerId) {
            this.GetAuthenticationGuidAsync(customerId, null);
        }
        
        /// <remarks/>
        public void GetAuthenticationGuidAsync(int customerId, object userState) {
            if ((this.GetAuthenticationGuidOperationCompleted == null)) {
                this.GetAuthenticationGuidOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAuthenticationGuidOperationCompleted);
            }
            this.InvokeAsync("GetAuthenticationGuid", new object[] {
                        customerId}, this.GetAuthenticationGuidOperationCompleted, userState);
        }
        
        private void OnGetAuthenticationGuidOperationCompleted(object arg) {
            if ((this.GetAuthenticationGuidCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAuthenticationGuidCompleted(this, new GetAuthenticationGuidCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecm.com/webservices/Reset", RequestNamespace="http://ecm.com/webservices/", ResponseNamespace="http://ecm.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Reset() {
            this.Invoke("Reset", new object[0]);
        }
        
        /// <remarks/>
        public void ResetAsync() {
            this.ResetAsync(null);
        }
        
        /// <remarks/>
        public void ResetAsync(object userState) {
            if ((this.ResetOperationCompleted == null)) {
                this.ResetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnResetOperationCompleted);
            }
            this.InvokeAsync("Reset", new object[0], this.ResetOperationCompleted, userState);
        }
        
        private void OnResetOperationCompleted(object arg) {
            if ((this.ResetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ResetCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecm.com/webservices/CreateNewAccount", RequestNamespace="http://ecm.com/webservices/", ResponseNamespace="http://ecm.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int CreateNewAccount(string newAccountXML) {
            object[] results = this.Invoke("CreateNewAccount", new object[] {
                        newAccountXML});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void CreateNewAccountAsync(string newAccountXML) {
            this.CreateNewAccountAsync(newAccountXML, null);
        }
        
        /// <remarks/>
        public void CreateNewAccountAsync(string newAccountXML, object userState) {
            if ((this.CreateNewAccountOperationCompleted == null)) {
                this.CreateNewAccountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateNewAccountOperationCompleted);
            }
            this.InvokeAsync("CreateNewAccount", new object[] {
                        newAccountXML}, this.CreateNewAccountOperationCompleted, userState);
        }
        
        private void OnCreateNewAccountOperationCompleted(object arg) {
            if ((this.CreateNewAccountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateNewAccountCompleted(this, new CreateNewAccountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecm.com/webservices/ResellerOptIn", RequestNamespace="http://ecm.com/webservices/", ResponseNamespace="http://ecm.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ResellerOptIn(string ResellerOptInXML) {
            this.Invoke("ResellerOptIn", new object[] {
                        ResellerOptInXML});
        }
        
        /// <remarks/>
        public void ResellerOptInAsync(string ResellerOptInXML) {
            this.ResellerOptInAsync(ResellerOptInXML, null);
        }
        
        /// <remarks/>
        public void ResellerOptInAsync(string ResellerOptInXML, object userState) {
            if ((this.ResellerOptInOperationCompleted == null)) {
                this.ResellerOptInOperationCompleted = new System.Threading.SendOrPostCallback(this.OnResellerOptInOperationCompleted);
            }
            this.InvokeAsync("ResellerOptIn", new object[] {
                        ResellerOptInXML}, this.ResellerOptInOperationCompleted, userState);
        }
        
        private void OnResellerOptInOperationCompleted(object arg) {
            if ((this.ResellerOptInCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ResellerOptInCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecm.com/webservices/ResellerOptOut", RequestNamespace="http://ecm.com/webservices/", ResponseNamespace="http://ecm.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ResellerOptOut(string ResellerOptOutXML) {
            this.Invoke("ResellerOptOut", new object[] {
                        ResellerOptOutXML});
        }
        
        /// <remarks/>
        public void ResellerOptOutAsync(string ResellerOptOutXML) {
            this.ResellerOptOutAsync(ResellerOptOutXML, null);
        }
        
        /// <remarks/>
        public void ResellerOptOutAsync(string ResellerOptOutXML, object userState) {
            if ((this.ResellerOptOutOperationCompleted == null)) {
                this.ResellerOptOutOperationCompleted = new System.Threading.SendOrPostCallback(this.OnResellerOptOutOperationCompleted);
            }
            this.InvokeAsync("ResellerOptOut", new object[] {
                        ResellerOptOutXML}, this.ResellerOptOutOperationCompleted, userState);
        }
        
        private void OnResellerOptOutOperationCompleted(object arg) {
            if ((this.ResellerOptOutCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ResellerOptOutCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecm.com/webservices/CreateNewCustomer", RequestNamespace="http://ecm.com/webservices/", ResponseNamespace="http://ecm.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int CreateNewCustomer(int privateLabelId, System.DateTime billingDate, int customerBillingTypeId, int emailLimit) {
            object[] results = this.Invoke("CreateNewCustomer", new object[] {
                        privateLabelId,
                        billingDate,
                        customerBillingTypeId,
                        emailLimit});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void CreateNewCustomerAsync(int privateLabelId, System.DateTime billingDate, int customerBillingTypeId, int emailLimit) {
            this.CreateNewCustomerAsync(privateLabelId, billingDate, customerBillingTypeId, emailLimit, null);
        }
        
        /// <remarks/>
        public void CreateNewCustomerAsync(int privateLabelId, System.DateTime billingDate, int customerBillingTypeId, int emailLimit, object userState) {
            if ((this.CreateNewCustomerOperationCompleted == null)) {
                this.CreateNewCustomerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateNewCustomerOperationCompleted);
            }
            this.InvokeAsync("CreateNewCustomer", new object[] {
                        privateLabelId,
                        billingDate,
                        customerBillingTypeId,
                        emailLimit}, this.CreateNewCustomerOperationCompleted, userState);
        }
        
        private void OnCreateNewCustomerOperationCompleted(object arg) {
            if ((this.CreateNewCustomerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateNewCustomerCompleted(this, new CreateNewCustomerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecm.com/webservices/RenewAccount", RequestNamespace="http://ecm.com/webservices/", ResponseNamespace="http://ecm.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string RenewAccount(string accountXML) {
            object[] results = this.Invoke("RenewAccount", new object[] {
                        accountXML});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RenewAccountAsync(string accountXML) {
            this.RenewAccountAsync(accountXML, null);
        }
        
        /// <remarks/>
        public void RenewAccountAsync(string accountXML, object userState) {
            if ((this.RenewAccountOperationCompleted == null)) {
                this.RenewAccountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRenewAccountOperationCompleted);
            }
            this.InvokeAsync("RenewAccount", new object[] {
                        accountXML}, this.RenewAccountOperationCompleted, userState);
        }
        
        private void OnRenewAccountOperationCompleted(object arg) {
            if ((this.RenewAccountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RenewAccountCompleted(this, new RenewAccountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecm.com/webservices/RenewCustomer", RequestNamespace="http://ecm.com/webservices/", ResponseNamespace="http://ecm.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int RenewCustomer(int customerId, int baseEmailLimit) {
            object[] results = this.Invoke("RenewCustomer", new object[] {
                        customerId,
                        baseEmailLimit});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void RenewCustomerAsync(int customerId, int baseEmailLimit) {
            this.RenewCustomerAsync(customerId, baseEmailLimit, null);
        }
        
        /// <remarks/>
        public void RenewCustomerAsync(int customerId, int baseEmailLimit, object userState) {
            if ((this.RenewCustomerOperationCompleted == null)) {
                this.RenewCustomerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRenewCustomerOperationCompleted);
            }
            this.InvokeAsync("RenewCustomer", new object[] {
                        customerId,
                        baseEmailLimit}, this.RenewCustomerOperationCompleted, userState);
        }
        
        private void OnRenewCustomerOperationCompleted(object arg) {
            if ((this.RenewCustomerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RenewCustomerCompleted(this, new RenewCustomerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecm.com/webservices/UpdateCustomer", RequestNamespace="http://ecm.com/webservices/", ResponseNamespace="http://ecm.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateCustomer(string customerXML) {
            this.Invoke("UpdateCustomer", new object[] {
                        customerXML});
        }
        
        /// <remarks/>
        public void UpdateCustomerAsync(string customerXML) {
            this.UpdateCustomerAsync(customerXML, null);
        }
        
        /// <remarks/>
        public void UpdateCustomerAsync(string customerXML, object userState) {
            if ((this.UpdateCustomerOperationCompleted == null)) {
                this.UpdateCustomerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateCustomerOperationCompleted);
            }
            this.InvokeAsync("UpdateCustomer", new object[] {
                        customerXML}, this.UpdateCustomerOperationCompleted, userState);
        }
        
        private void OnUpdateCustomerOperationCompleted(object arg) {
            if ((this.UpdateCustomerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateCustomerCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecm.com/webservices/RemoveCustomer", RequestNamespace="http://ecm.com/webservices/", ResponseNamespace="http://ecm.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RemoveCustomer(int customerId) {
            this.Invoke("RemoveCustomer", new object[] {
                        customerId});
        }
        
        /// <remarks/>
        public void RemoveCustomerAsync(int customerId) {
            this.RemoveCustomerAsync(customerId, null);
        }
        
        /// <remarks/>
        public void RemoveCustomerAsync(int customerId, object userState) {
            if ((this.RemoveCustomerOperationCompleted == null)) {
                this.RemoveCustomerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveCustomerOperationCompleted);
            }
            this.InvokeAsync("RemoveCustomer", new object[] {
                        customerId}, this.RemoveCustomerOperationCompleted, userState);
        }
        
        private void OnRemoveCustomerOperationCompleted(object arg) {
            if ((this.RemoveCustomerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveCustomerCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecm.com/webservices/GetCustomerIdNamePairs", RequestNamespace="http://ecm.com/webservices/", ResponseNamespace="http://ecm.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public SerializableIdNamePair[] GetCustomerIdNamePairs(string shopperId) {
            object[] results = this.Invoke("GetCustomerIdNamePairs", new object[] {
                        shopperId});
            return ((SerializableIdNamePair[])(results[0]));
        }
        
        /// <remarks/>
        public void GetCustomerIdNamePairsAsync(string shopperId) {
            this.GetCustomerIdNamePairsAsync(shopperId, null);
        }
        
        /// <remarks/>
        public void GetCustomerIdNamePairsAsync(string shopperId, object userState) {
            if ((this.GetCustomerIdNamePairsOperationCompleted == null)) {
                this.GetCustomerIdNamePairsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomerIdNamePairsOperationCompleted);
            }
            this.InvokeAsync("GetCustomerIdNamePairs", new object[] {
                        shopperId}, this.GetCustomerIdNamePairsOperationCompleted, userState);
        }
        
        private void OnGetCustomerIdNamePairsOperationCompleted(object arg) {
            if ((this.GetCustomerIdNamePairsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustomerIdNamePairsCompleted(this, new GetCustomerIdNamePairsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecm.com/webservices/GetCustomerInfo", RequestNamespace="http://ecm.com/webservices/", ResponseNamespace="http://ecm.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CustomerInfo GetCustomerInfo(int customerId) {
            object[] results = this.Invoke("GetCustomerInfo", new object[] {
                        customerId});
            return ((CustomerInfo)(results[0]));
        }
        
        /// <remarks/>
        public void GetCustomerInfoAsync(int customerId) {
            this.GetCustomerInfoAsync(customerId, null);
        }
        
        /// <remarks/>
        public void GetCustomerInfoAsync(int customerId, object userState) {
            if ((this.GetCustomerInfoOperationCompleted == null)) {
                this.GetCustomerInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomerInfoOperationCompleted);
            }
            this.InvokeAsync("GetCustomerInfo", new object[] {
                        customerId}, this.GetCustomerInfoOperationCompleted, userState);
        }
        
        private void OnGetCustomerInfoOperationCompleted(object arg) {
            if ((this.GetCustomerInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustomerInfoCompleted(this, new GetCustomerInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecm.com/webservices/GetCustomerSummary", RequestNamespace="http://ecm.com/webservices/", ResponseNamespace="http://ecm.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCustomerSummary(string customerXML) {
            object[] results = this.Invoke("GetCustomerSummary", new object[] {
                        customerXML});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCustomerSummaryAsync(string customerXML) {
            this.GetCustomerSummaryAsync(customerXML, null);
        }
        
        /// <remarks/>
        public void GetCustomerSummaryAsync(string customerXML, object userState) {
            if ((this.GetCustomerSummaryOperationCompleted == null)) {
                this.GetCustomerSummaryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomerSummaryOperationCompleted);
            }
            this.InvokeAsync("GetCustomerSummary", new object[] {
                        customerXML}, this.GetCustomerSummaryOperationCompleted, userState);
        }
        
        private void OnGetCustomerSummaryOperationCompleted(object arg) {
            if ((this.GetCustomerSummaryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustomerSummaryCompleted(this, new GetCustomerSummaryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecm.com/webservices/ExecCreateNewInternalCustomer", RequestNamespace="http://ecm.com/webservices/", ResponseNamespace="http://ecm.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int ExecCreateNewInternalCustomer(string token, string firstName, string lastName, string windowsLogin) {
            object[] results = this.Invoke("ExecCreateNewInternalCustomer", new object[] {
                        token,
                        firstName,
                        lastName,
                        windowsLogin});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void ExecCreateNewInternalCustomerAsync(string token, string firstName, string lastName, string windowsLogin) {
            this.ExecCreateNewInternalCustomerAsync(token, firstName, lastName, windowsLogin, null);
        }
        
        /// <remarks/>
        public void ExecCreateNewInternalCustomerAsync(string token, string firstName, string lastName, string windowsLogin, object userState) {
            if ((this.ExecCreateNewInternalCustomerOperationCompleted == null)) {
                this.ExecCreateNewInternalCustomerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecCreateNewInternalCustomerOperationCompleted);
            }
            this.InvokeAsync("ExecCreateNewInternalCustomer", new object[] {
                        token,
                        firstName,
                        lastName,
                        windowsLogin}, this.ExecCreateNewInternalCustomerOperationCompleted, userState);
        }
        
        private void OnExecCreateNewInternalCustomerOperationCompleted(object arg) {
            if ((this.ExecCreateNewInternalCustomerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecCreateNewInternalCustomerCompleted(this, new ExecCreateNewInternalCustomerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecm.com/webservices/ExecRemoveInternalCustomer", RequestNamespace="http://ecm.com/webservices/", ResponseNamespace="http://ecm.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ExecRemoveInternalCustomer(string token, string windowsLogin) {
            this.Invoke("ExecRemoveInternalCustomer", new object[] {
                        token,
                        windowsLogin});
        }
        
        /// <remarks/>
        public void ExecRemoveInternalCustomerAsync(string token, string windowsLogin) {
            this.ExecRemoveInternalCustomerAsync(token, windowsLogin, null);
        }
        
        /// <remarks/>
        public void ExecRemoveInternalCustomerAsync(string token, string windowsLogin, object userState) {
            if ((this.ExecRemoveInternalCustomerOperationCompleted == null)) {
                this.ExecRemoveInternalCustomerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecRemoveInternalCustomerOperationCompleted);
            }
            this.InvokeAsync("ExecRemoveInternalCustomer", new object[] {
                        token,
                        windowsLogin}, this.ExecRemoveInternalCustomerOperationCompleted, userState);
        }
        
        private void OnExecRemoveInternalCustomerOperationCompleted(object arg) {
            if ((this.ExecRemoveInternalCustomerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecRemoveInternalCustomerCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecm.com/webservices/ExecAccountOptIn", RequestNamespace="http://ecm.com/webservices/", ResponseNamespace="http://ecm.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ExecAccountOptIn(string token, string subscriberXml) {
            this.Invoke("ExecAccountOptIn", new object[] {
                        token,
                        subscriberXml});
        }
        
        /// <remarks/>
        public void ExecAccountOptInAsync(string token, string subscriberXml) {
            this.ExecAccountOptInAsync(token, subscriberXml, null);
        }
        
        /// <remarks/>
        public void ExecAccountOptInAsync(string token, string subscriberXml, object userState) {
            if ((this.ExecAccountOptInOperationCompleted == null)) {
                this.ExecAccountOptInOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecAccountOptInOperationCompleted);
            }
            this.InvokeAsync("ExecAccountOptIn", new object[] {
                        token,
                        subscriberXml}, this.ExecAccountOptInOperationCompleted, userState);
        }
        
        private void OnExecAccountOptInOperationCompleted(object arg) {
            if ((this.ExecAccountOptInCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecAccountOptInCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecm.com/webservices/ExecAccountOptOut", RequestNamespace="http://ecm.com/webservices/", ResponseNamespace="http://ecm.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ExecAccountOptOut(string token, string subscriberXml) {
            this.Invoke("ExecAccountOptOut", new object[] {
                        token,
                        subscriberXml});
        }
        
        /// <remarks/>
        public void ExecAccountOptOutAsync(string token, string subscriberXml) {
            this.ExecAccountOptOutAsync(token, subscriberXml, null);
        }
        
        /// <remarks/>
        public void ExecAccountOptOutAsync(string token, string subscriberXml, object userState) {
            if ((this.ExecAccountOptOutOperationCompleted == null)) {
                this.ExecAccountOptOutOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecAccountOptOutOperationCompleted);
            }
            this.InvokeAsync("ExecAccountOptOut", new object[] {
                        token,
                        subscriberXml}, this.ExecAccountOptOutOperationCompleted, userState);
        }
        
        private void OnExecAccountOptOutOperationCompleted(object arg) {
            if ((this.ExecAccountOptOutCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecAccountOptOutCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecm.com/webservices/ExecDoesSubscriberExist", RequestNamespace="http://ecm.com/webservices/", ResponseNamespace="http://ecm.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ExecDoesSubscriberExist(string token, string subscriberXml) {
            object[] results = this.Invoke("ExecDoesSubscriberExist", new object[] {
                        token,
                        subscriberXml});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ExecDoesSubscriberExistAsync(string token, string subscriberXml) {
            this.ExecDoesSubscriberExistAsync(token, subscriberXml, null);
        }
        
        /// <remarks/>
        public void ExecDoesSubscriberExistAsync(string token, string subscriberXml, object userState) {
            if ((this.ExecDoesSubscriberExistOperationCompleted == null)) {
                this.ExecDoesSubscriberExistOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecDoesSubscriberExistOperationCompleted);
            }
            this.InvokeAsync("ExecDoesSubscriberExist", new object[] {
                        token,
                        subscriberXml}, this.ExecDoesSubscriberExistOperationCompleted, userState);
        }
        
        private void OnExecDoesSubscriberExistOperationCompleted(object arg) {
            if ((this.ExecDoesSubscriberExistCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecDoesSubscriberExistCompleted(this, new ExecDoesSubscriberExistCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecm.com/webservices/ExecDoesInternalCustomerExist", RequestNamespace="http://ecm.com/webservices/", ResponseNamespace="http://ecm.com/webservices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ExecDoesInternalCustomerExist(string token, string windowsLogin) {
            object[] results = this.Invoke("ExecDoesInternalCustomerExist", new object[] {
                        token,
                        windowsLogin});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ExecDoesInternalCustomerExistAsync(string token, string windowsLogin) {
            this.ExecDoesInternalCustomerExistAsync(token, windowsLogin, null);
        }
        
        /// <remarks/>
        public void ExecDoesInternalCustomerExistAsync(string token, string windowsLogin, object userState) {
            if ((this.ExecDoesInternalCustomerExistOperationCompleted == null)) {
                this.ExecDoesInternalCustomerExistOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecDoesInternalCustomerExistOperationCompleted);
            }
            this.InvokeAsync("ExecDoesInternalCustomerExist", new object[] {
                        token,
                        windowsLogin}, this.ExecDoesInternalCustomerExistOperationCompleted, userState);
        }
        
        private void OnExecDoesInternalCustomerExistOperationCompleted(object arg) {
            if ((this.ExecDoesInternalCustomerExistCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecDoesInternalCustomerExistCompleted(this, new ExecDoesInternalCustomerExistCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.225")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ecm.com/webservices/")]
    public partial class SerializableIdNamePair {
        
        private int idField;
        
        private string nameField;
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.225")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ecm.com/webservices/")]
    public partial class CustomerInfo {
        
        private int idField;
        
        private string nameField;
        
        private int privateLabelIdField;
        
        private string shopperIdField;
        
        private int updateFrequencyIdField;
        
        private int requestCountIdField;
        
        private string timezoneIdField;
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public int PrivateLabelId {
            get {
                return this.privateLabelIdField;
            }
            set {
                this.privateLabelIdField = value;
            }
        }
        
        /// <remarks/>
        public string ShopperId {
            get {
                return this.shopperIdField;
            }
            set {
                this.shopperIdField = value;
            }
        }
        
        /// <remarks/>
        public int UpdateFrequencyId {
            get {
                return this.updateFrequencyIdField;
            }
            set {
                this.updateFrequencyIdField = value;
            }
        }
        
        /// <remarks/>
        public int RequestCountId {
            get {
                return this.requestCountIdField;
            }
            set {
                this.requestCountIdField = value;
            }
        }
        
        /// <remarks/>
        public string TimezoneId {
            get {
                return this.timezoneIdField;
            }
            set {
                this.timezoneIdField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetAuthenticationGuidCompletedEventHandler(object sender, GetAuthenticationGuidCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAuthenticationGuidCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAuthenticationGuidCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ResetCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CreateNewAccountCompletedEventHandler(object sender, CreateNewAccountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateNewAccountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateNewAccountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ResellerOptInCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ResellerOptOutCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CreateNewCustomerCompletedEventHandler(object sender, CreateNewCustomerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateNewCustomerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateNewCustomerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void RenewAccountCompletedEventHandler(object sender, RenewAccountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RenewAccountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RenewAccountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void RenewCustomerCompletedEventHandler(object sender, RenewCustomerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RenewCustomerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RenewCustomerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UpdateCustomerCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void RemoveCustomerCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetCustomerIdNamePairsCompletedEventHandler(object sender, GetCustomerIdNamePairsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustomerIdNamePairsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCustomerIdNamePairsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SerializableIdNamePair[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SerializableIdNamePair[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetCustomerInfoCompletedEventHandler(object sender, GetCustomerInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustomerInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCustomerInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CustomerInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CustomerInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetCustomerSummaryCompletedEventHandler(object sender, GetCustomerSummaryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustomerSummaryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCustomerSummaryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ExecCreateNewInternalCustomerCompletedEventHandler(object sender, ExecCreateNewInternalCustomerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExecCreateNewInternalCustomerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecCreateNewInternalCustomerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ExecRemoveInternalCustomerCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ExecAccountOptInCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ExecAccountOptOutCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ExecDoesSubscriberExistCompletedEventHandler(object sender, ExecDoesSubscriberExistCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExecDoesSubscriberExistCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecDoesSubscriberExistCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ExecDoesInternalCustomerExistCompletedEventHandler(object sender, ExecDoesInternalCustomerExistCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExecDoesInternalCustomerExistCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecDoesInternalCustomerExistCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591