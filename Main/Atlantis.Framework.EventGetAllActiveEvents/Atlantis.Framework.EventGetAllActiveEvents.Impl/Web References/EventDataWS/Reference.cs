//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.1.
// 
#pragma warning disable 1591

namespace Atlantis.Framework.EventGetAllActiveEvents.Impl.EventDataWS {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="SupportEventDataSoap", Namespace="http://eventservice.intranet.gdg/")]
    public partial class SupportEventData : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback SearchEventsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllActiveEventsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetServicesListOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public SupportEventData() {
            this.Url = global::Atlantis.Framework.EventGetAllActiveEvents.Impl.Properties.Settings.Default.Atlantis_Framework_EventGetAllActiveEvents_Impl_EventDataWS_SupportEventData;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event SearchEventsCompletedEventHandler SearchEventsCompleted;
        
        /// <remarks/>
        public event GetAllActiveEventsCompletedEventHandler GetAllActiveEventsCompleted;
        
        /// <remarks/>
        public event GetServicesListCompletedEventHandler GetServicesListCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eventservice.intranet.gdg/SearchEvents", RequestNamespace="http://eventservice.intranet.gdg/", ResponseNamespace="http://eventservice.intranet.gdg/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode SearchEvents(string clientName, System.DateTime startDate, System.DateTime endDate) {
            object[] results = this.Invoke("SearchEvents", new object[] {
                        clientName,
                        startDate,
                        endDate});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void SearchEventsAsync(string clientName, System.DateTime startDate, System.DateTime endDate) {
            this.SearchEventsAsync(clientName, startDate, endDate, null);
        }
        
        /// <remarks/>
        public void SearchEventsAsync(string clientName, System.DateTime startDate, System.DateTime endDate, object userState) {
            if ((this.SearchEventsOperationCompleted == null)) {
                this.SearchEventsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSearchEventsOperationCompleted);
            }
            this.InvokeAsync("SearchEvents", new object[] {
                        clientName,
                        startDate,
                        endDate}, this.SearchEventsOperationCompleted, userState);
        }
        
        private void OnSearchEventsOperationCompleted(object arg) {
            if ((this.SearchEventsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SearchEventsCompleted(this, new SearchEventsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eventservice.intranet.gdg/GetAllActiveEvents", RequestNamespace="http://eventservice.intranet.gdg/", ResponseNamespace="http://eventservice.intranet.gdg/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetAllActiveEvents(string clientName) {
            object[] results = this.Invoke("GetAllActiveEvents", new object[] {
                        clientName});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetAllActiveEventsAsync(string clientName) {
            this.GetAllActiveEventsAsync(clientName, null);
        }
        
        /// <remarks/>
        public void GetAllActiveEventsAsync(string clientName, object userState) {
            if ((this.GetAllActiveEventsOperationCompleted == null)) {
                this.GetAllActiveEventsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllActiveEventsOperationCompleted);
            }
            this.InvokeAsync("GetAllActiveEvents", new object[] {
                        clientName}, this.GetAllActiveEventsOperationCompleted, userState);
        }
        
        private void OnGetAllActiveEventsOperationCompleted(object arg) {
            if ((this.GetAllActiveEventsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllActiveEventsCompleted(this, new GetAllActiveEventsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://eventservice.intranet.gdg/GetServicesList", RequestNamespace="http://eventservice.intranet.gdg/", ResponseNamespace="http://eventservice.intranet.gdg/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetServicesList(string clientName) {
            object[] results = this.Invoke("GetServicesList", new object[] {
                        clientName});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetServicesListAsync(string clientName) {
            this.GetServicesListAsync(clientName, null);
        }
        
        /// <remarks/>
        public void GetServicesListAsync(string clientName, object userState) {
            if ((this.GetServicesListOperationCompleted == null)) {
                this.GetServicesListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServicesListOperationCompleted);
            }
            this.InvokeAsync("GetServicesList", new object[] {
                        clientName}, this.GetServicesListOperationCompleted, userState);
        }
        
        private void OnGetServicesListOperationCompleted(object arg) {
            if ((this.GetServicesListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServicesListCompleted(this, new GetServicesListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SearchEventsCompletedEventHandler(object sender, SearchEventsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SearchEventsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SearchEventsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetAllActiveEventsCompletedEventHandler(object sender, GetAllActiveEventsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllActiveEventsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllActiveEventsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetServicesListCompletedEventHandler(object sender, GetServicesListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServicesListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServicesListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591