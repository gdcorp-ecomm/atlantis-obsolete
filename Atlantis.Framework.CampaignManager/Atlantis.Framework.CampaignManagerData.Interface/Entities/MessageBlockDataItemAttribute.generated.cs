//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
using Atlantis.Framework.Entity.Interface;
using Atlantis.Framework.Entity.Interface.SelfTracking;

namespace Atlantis.Framework.CampaignManagerData.Interface.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(MessageBlockDataItem))]
    [KnownType(typeof(MessageBlockDataItemAttributeValue))]
    public partial class MessageBlockDataItemAttribute:  IAtlantisEntity, IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int MessageBlockDataItemAttributeID
        {
            get { return _messageBlockDataItemAttributeID; }
            set
            {
                if (_messageBlockDataItemAttributeID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'MessageBlockDataItemAttributeID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _messageBlockDataItemAttributeID = value;
                    OnPropertyChanged("MessageBlockDataItemAttributeID");
                }
            }
        }
        private int _messageBlockDataItemAttributeID;
    
        [DataMember]
        public int MessageBlockDataItemID
        {
            get { return _messageBlockDataItemID; }
            set
            {
                if (_messageBlockDataItemID != value)
                {
                    ChangeTracker.RecordOriginalValue("MessageBlockDataItemID", _messageBlockDataItemID);
                    if (!IsDeserializing)
                    {
                        if (MessageBlockDataItem != null && MessageBlockDataItem.MessageBlockDataItemID != value)
                        {
                            MessageBlockDataItem = null;
                        }
                    }
                    _messageBlockDataItemID = value;
                    OnPropertyChanged("MessageBlockDataItemID");
                }
            }
        }
        private int _messageBlockDataItemID;
    
        [DataMember]
        public short DataItemAttributeSequence
        {
            get { return _dataItemAttributeSequence; }
            set
            {
                if (_dataItemAttributeSequence != value)
                {
                    _dataItemAttributeSequence = value;
                    OnPropertyChanged("DataItemAttributeSequence");
                }
            }
        }
        private short _dataItemAttributeSequence;
    
        [DataMember]
        public string DataItemAttributeKey
        {
            get { return _dataItemAttributeKey; }
            set
            {
                if (_dataItemAttributeKey != value)
                {
                    _dataItemAttributeKey = value;
                    OnPropertyChanged("DataItemAttributeKey");
                }
            }
        }
        private string _dataItemAttributeKey;
    
        [DataMember]
        public System.DateTime DateAdded
        {
            get { return _dateAdded; }
            set
            {
                if (_dateAdded != value)
                {
                    _dateAdded = value;
                    OnPropertyChanged("DateAdded");
                }
            }
        }
        private System.DateTime _dateAdded;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public MessageBlockDataItem MessageBlockDataItem
        {
            get { return _messageBlockDataItem; }
            set
            {
                if (!ReferenceEquals(_messageBlockDataItem, value))
                {
                    var previousValue = _messageBlockDataItem;
                    _messageBlockDataItem = value;
                    FixupMessageBlockDataItem(previousValue);
                    OnNavigationPropertyChanged("MessageBlockDataItem");
                }
            }
        }
        private MessageBlockDataItem _messageBlockDataItem;
    
        [DataMember]
        public TrackableCollection<MessageBlockDataItemAttributeValue> MessageBlockDataItemAttributeValues
        {
            get
            {
                if (_messageBlockDataItemAttributeValues == null)
                {
                    _messageBlockDataItemAttributeValues = new TrackableCollection<MessageBlockDataItemAttributeValue>();
                    _messageBlockDataItemAttributeValues.CollectionChanged += FixupMessageBlockDataItemAttributeValues;
                }
                return _messageBlockDataItemAttributeValues;
            }
            set
            {
                if (!ReferenceEquals(_messageBlockDataItemAttributeValues, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_messageBlockDataItemAttributeValues != null)
                    {
                        _messageBlockDataItemAttributeValues.CollectionChanged -= FixupMessageBlockDataItemAttributeValues;
                    }
                    _messageBlockDataItemAttributeValues = value;
                    if (_messageBlockDataItemAttributeValues != null)
                    {
                        _messageBlockDataItemAttributeValues.CollectionChanged += FixupMessageBlockDataItemAttributeValues;
                    }
                    OnNavigationPropertyChanged("MessageBlockDataItemAttributeValues");
                }
            }
        }
        private TrackableCollection<MessageBlockDataItemAttributeValue> _messageBlockDataItemAttributeValues;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            MessageBlockDataItem = null;
            MessageBlockDataItemAttributeValues.Clear();
        }

        #endregion
        #region Association Fixup
    
        private void FixupMessageBlockDataItem(MessageBlockDataItem previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.MessageBlockDataItemAttributes.Contains(this))
            {
                previousValue.MessageBlockDataItemAttributes.Remove(this);
            }
    
            if (MessageBlockDataItem != null)
            {
                if (!MessageBlockDataItem.MessageBlockDataItemAttributes.Contains(this))
                {
                    MessageBlockDataItem.MessageBlockDataItemAttributes.Add(this);
                }
    
                MessageBlockDataItemID = MessageBlockDataItem.MessageBlockDataItemID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("MessageBlockDataItem")
                    && (ChangeTracker.OriginalValues["MessageBlockDataItem"] == MessageBlockDataItem))
                {
                    ChangeTracker.OriginalValues.Remove("MessageBlockDataItem");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("MessageBlockDataItem", previousValue);
                }
                if (MessageBlockDataItem != null && !MessageBlockDataItem.ChangeTracker.ChangeTrackingEnabled)
                {
                    MessageBlockDataItem.StartTracking();
                }
            }
        }
    
        private void FixupMessageBlockDataItemAttributeValues(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (MessageBlockDataItemAttributeValue item in e.NewItems)
                {
                    item.MessageBlockDataItemAttribute = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("MessageBlockDataItemAttributeValues", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (MessageBlockDataItemAttributeValue item in e.OldItems)
                {
                    if (ReferenceEquals(item.MessageBlockDataItemAttribute, this))
                    {
                        item.MessageBlockDataItemAttribute = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("MessageBlockDataItemAttributeValues", item);
                    }
                }
            }
        }

        #endregion
    }
}
