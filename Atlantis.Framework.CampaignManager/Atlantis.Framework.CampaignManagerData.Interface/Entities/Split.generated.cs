//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
using Atlantis.Framework.Entity.Interface;
using Atlantis.Framework.Entity.Interface.SelfTracking;

namespace Atlantis.Framework.CampaignManagerData.Interface.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(SplitRuleBlockMap))]
    public partial class Split:  IAtlantisEntity, IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int SplitID
        {
            get { return _splitID; }
            set
            {
                if (_splitID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'SplitID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _splitID = value;
                    OnPropertyChanged("SplitID");
                }
            }
        }
        private int _splitID;
    
        [DataMember]
        public int AudienceID
        {
            get { return _audienceID; }
            set
            {
                if (_audienceID != value)
                {
                    _audienceID = value;
                    OnPropertyChanged("AudienceID");
                }
            }
        }
        private int _audienceID;
    
        [DataMember]
        public int SegmentID
        {
            get { return _segmentID; }
            set
            {
                if (_segmentID != value)
                {
                    _segmentID = value;
                    OnPropertyChanged("SegmentID");
                }
            }
        }
        private int _segmentID;
    
        [DataMember]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public string SplitDescription
        {
            get { return _splitDescription; }
            set
            {
                if (_splitDescription != value)
                {
                    _splitDescription = value;
                    OnPropertyChanged("SplitDescription");
                }
            }
        }
        private string _splitDescription;
    
        [DataMember]
        public System.DateTime DateAdded
        {
            get { return _dateAdded; }
            set
            {
                if (_dateAdded != value)
                {
                    _dateAdded = value;
                    OnPropertyChanged("DateAdded");
                }
            }
        }
        private System.DateTime _dateAdded;
    
        [DataMember]
        public System.DateTime DateUpdated
        {
            get { return _dateUpdated; }
            set
            {
                if (_dateUpdated != value)
                {
                    _dateUpdated = value;
                    OnPropertyChanged("DateUpdated");
                }
            }
        }
        private System.DateTime _dateUpdated;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<SplitRuleBlockMap> SplitRuleBlockMaps
        {
            get
            {
                if (_splitRuleBlockMaps == null)
                {
                    _splitRuleBlockMaps = new TrackableCollection<SplitRuleBlockMap>();
                    _splitRuleBlockMaps.CollectionChanged += FixupSplitRuleBlockMaps;
                }
                return _splitRuleBlockMaps;
            }
            set
            {
                if (!ReferenceEquals(_splitRuleBlockMaps, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_splitRuleBlockMaps != null)
                    {
                        _splitRuleBlockMaps.CollectionChanged -= FixupSplitRuleBlockMaps;
                    }
                    _splitRuleBlockMaps = value;
                    if (_splitRuleBlockMaps != null)
                    {
                        _splitRuleBlockMaps.CollectionChanged += FixupSplitRuleBlockMaps;
                    }
                    OnNavigationPropertyChanged("SplitRuleBlockMaps");
                }
            }
        }
        private TrackableCollection<SplitRuleBlockMap> _splitRuleBlockMaps;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            SplitRuleBlockMaps.Clear();
        }

        #endregion
        #region Association Fixup
    
        private void FixupSplitRuleBlockMaps(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (SplitRuleBlockMap item in e.NewItems)
                {
                    item.Split = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("SplitRuleBlockMaps", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SplitRuleBlockMap item in e.OldItems)
                {
                    if (ReferenceEquals(item.Split, this))
                    {
                        item.Split = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("SplitRuleBlockMaps", item);
                    }
                }
            }
        }

        #endregion
    }
}
