//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
using Atlantis.Framework.Entity.Interface;
using Atlantis.Framework.Entity.Interface.SelfTracking;

namespace Atlantis.Framework.CampaignManagerData.Interface.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(MessageInstance))]
    public partial class fbiOffer:  IAtlantisEntity, IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int fbiOfferID
        {
            get { return _fbiOfferID; }
            set
            {
                if (_fbiOfferID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'fbiOfferID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _fbiOfferID = value;
                    OnPropertyChanged("fbiOfferID");
                }
            }
        }
        private int _fbiOfferID;
    
        [DataMember]
        public string discountType
        {
            get { return _discountType; }
            set
            {
                if (_discountType != value)
                {
                    _discountType = value;
                    OnPropertyChanged("discountType");
                }
            }
        }
        private string _discountType;
    
        [DataMember]
        public Nullable<int> fastballDiscount
        {
            get { return _fastballDiscount; }
            set
            {
                if (_fastballDiscount != value)
                {
                    _fastballDiscount = value;
                    OnPropertyChanged("fastballDiscount");
                }
            }
        }
        private Nullable<int> _fastballDiscount;
    
        [DataMember]
        public Nullable<int> fastballOrderDiscount
        {
            get { return _fastballOrderDiscount; }
            set
            {
                if (_fastballOrderDiscount != value)
                {
                    _fastballOrderDiscount = value;
                    OnPropertyChanged("fastballOrderDiscount");
                }
            }
        }
        private Nullable<int> _fastballOrderDiscount;
    
        [DataMember]
        public Nullable<int> ProductGroupCode
        {
            get { return _productGroupCode; }
            set
            {
                if (_productGroupCode != value)
                {
                    _productGroupCode = value;
                    OnPropertyChanged("ProductGroupCode");
                }
            }
        }
        private Nullable<int> _productGroupCode;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<MessageInstance> MessageInstances
        {
            get
            {
                if (_messageInstances == null)
                {
                    _messageInstances = new TrackableCollection<MessageInstance>();
                    _messageInstances.CollectionChanged += FixupMessageInstances;
                }
                return _messageInstances;
            }
            set
            {
                if (!ReferenceEquals(_messageInstances, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_messageInstances != null)
                    {
                        _messageInstances.CollectionChanged -= FixupMessageInstances;
                    }
                    _messageInstances = value;
                    if (_messageInstances != null)
                    {
                        _messageInstances.CollectionChanged += FixupMessageInstances;
                    }
                    OnNavigationPropertyChanged("MessageInstances");
                }
            }
        }
        private TrackableCollection<MessageInstance> _messageInstances;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            MessageInstances.Clear();
        }

        #endregion
        #region Association Fixup
    
        private void FixupMessageInstances(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (MessageInstance item in e.NewItems)
                {
                    item.fbiOffer = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("MessageInstances", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (MessageInstance item in e.OldItems)
                {
                    if (ReferenceEquals(item.fbiOffer, this))
                    {
                        item.fbiOffer = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("MessageInstances", item);
                    }
                }
            }
        }

        #endregion
    }
}
