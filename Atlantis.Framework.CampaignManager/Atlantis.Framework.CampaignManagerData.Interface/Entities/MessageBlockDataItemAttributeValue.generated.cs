//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
using Atlantis.Framework.Entity.Interface;
using Atlantis.Framework.Entity.Interface.SelfTracking;

namespace Atlantis.Framework.CampaignManagerData.Interface.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(MessageBlockDataItemAttribute))]
    public partial class MessageBlockDataItemAttributeValue:  IAtlantisEntity, IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int MessageBlockDataItemAttributeValueID
        {
            get { return _messageBlockDataItemAttributeValueID; }
            set
            {
                if (_messageBlockDataItemAttributeValueID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'MessageBlockDataItemAttributeValueID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _messageBlockDataItemAttributeValueID = value;
                    OnPropertyChanged("MessageBlockDataItemAttributeValueID");
                }
            }
        }
        private int _messageBlockDataItemAttributeValueID;
    
        [DataMember]
        public int MessageBlockDataItemAttributeID
        {
            get { return _messageBlockDataItemAttributeID; }
            set
            {
                if (_messageBlockDataItemAttributeID != value)
                {
                    ChangeTracker.RecordOriginalValue("MessageBlockDataItemAttributeID", _messageBlockDataItemAttributeID);
                    if (!IsDeserializing)
                    {
                        if (MessageBlockDataItemAttribute != null && MessageBlockDataItemAttribute.MessageBlockDataItemAttributeID != value)
                        {
                            MessageBlockDataItemAttribute = null;
                        }
                    }
                    _messageBlockDataItemAttributeID = value;
                    OnPropertyChanged("MessageBlockDataItemAttributeID");
                }
            }
        }
        private int _messageBlockDataItemAttributeID;
    
        [DataMember]
        public short DataItemAttributeValueSequence
        {
            get { return _dataItemAttributeValueSequence; }
            set
            {
                if (_dataItemAttributeValueSequence != value)
                {
                    _dataItemAttributeValueSequence = value;
                    OnPropertyChanged("DataItemAttributeValueSequence");
                }
            }
        }
        private short _dataItemAttributeValueSequence;
    
        [DataMember]
        public string DataItemAttributeValue
        {
            get { return _dataItemAttributeValue; }
            set
            {
                if (_dataItemAttributeValue != value)
                {
                    _dataItemAttributeValue = value;
                    OnPropertyChanged("DataItemAttributeValue");
                }
            }
        }
        private string _dataItemAttributeValue;
    
        [DataMember]
        public System.DateTime DateAdded
        {
            get { return _dateAdded; }
            set
            {
                if (_dateAdded != value)
                {
                    _dateAdded = value;
                    OnPropertyChanged("DateAdded");
                }
            }
        }
        private System.DateTime _dateAdded;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public MessageBlockDataItemAttribute MessageBlockDataItemAttribute
        {
            get { return _messageBlockDataItemAttribute; }
            set
            {
                if (!ReferenceEquals(_messageBlockDataItemAttribute, value))
                {
                    var previousValue = _messageBlockDataItemAttribute;
                    _messageBlockDataItemAttribute = value;
                    FixupMessageBlockDataItemAttribute(previousValue);
                    OnNavigationPropertyChanged("MessageBlockDataItemAttribute");
                }
            }
        }
        private MessageBlockDataItemAttribute _messageBlockDataItemAttribute;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            MessageBlockDataItemAttribute = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupMessageBlockDataItemAttribute(MessageBlockDataItemAttribute previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.MessageBlockDataItemAttributeValues.Contains(this))
            {
                previousValue.MessageBlockDataItemAttributeValues.Remove(this);
            }
    
            if (MessageBlockDataItemAttribute != null)
            {
                if (!MessageBlockDataItemAttribute.MessageBlockDataItemAttributeValues.Contains(this))
                {
                    MessageBlockDataItemAttribute.MessageBlockDataItemAttributeValues.Add(this);
                }
    
                MessageBlockDataItemAttributeID = MessageBlockDataItemAttribute.MessageBlockDataItemAttributeID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("MessageBlockDataItemAttribute")
                    && (ChangeTracker.OriginalValues["MessageBlockDataItemAttribute"] == MessageBlockDataItemAttribute))
                {
                    ChangeTracker.OriginalValues.Remove("MessageBlockDataItemAttribute");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("MessageBlockDataItemAttribute", previousValue);
                }
                if (MessageBlockDataItemAttribute != null && !MessageBlockDataItemAttribute.ChangeTracker.ChangeTrackingEnabled)
                {
                    MessageBlockDataItemAttribute.StartTracking();
                }
            }
        }

        #endregion
    }
}
