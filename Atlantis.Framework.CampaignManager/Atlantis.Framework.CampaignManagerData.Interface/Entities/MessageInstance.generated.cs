//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
using Atlantis.Framework.Entity.Interface;
using Atlantis.Framework.Entity.Interface.SelfTracking;

namespace Atlantis.Framework.CampaignManagerData.Interface.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(MessageBlock))]
    [KnownType(typeof(MessageLanguage))]
    [KnownType(typeof(fbiOffer))]
    public partial class MessageInstance:  IAtlantisEntity, IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int MessageInstanceID
        {
            get { return _messageInstanceID; }
            set
            {
                if (_messageInstanceID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'MessageInstanceID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _messageInstanceID = value;
                    OnPropertyChanged("MessageInstanceID");
                }
            }
        }
        private int _messageInstanceID;
    
        [DataMember]
        public Nullable<int> fbiOfferID
        {
            get { return _fbiOfferID; }
            set
            {
                if (_fbiOfferID != value)
                {
                    ChangeTracker.RecordOriginalValue("fbiOfferID", _fbiOfferID);
                    if (!IsDeserializing)
                    {
                        if (fbiOffer != null && fbiOffer.fbiOfferID != value)
                        {
                            fbiOffer = null;
                        }
                    }
                    _fbiOfferID = value;
                    OnPropertyChanged("fbiOfferID");
                }
            }
        }
        private Nullable<int> _fbiOfferID;
    
        [DataMember]
        public int CampaignID
        {
            get { return _campaignID; }
            set
            {
                if (_campaignID != value)
                {
                    _campaignID = value;
                    OnPropertyChanged("CampaignID");
                }
            }
        }
        private int _campaignID;
    
        [DataMember]
        public int CampaignMessageID
        {
            get { return _campaignMessageID; }
            set
            {
                if (_campaignMessageID != value)
                {
                    _campaignMessageID = value;
                    OnPropertyChanged("CampaignMessageID");
                }
            }
        }
        private int _campaignMessageID;
    
        [DataMember]
        public int ApplicationID
        {
            get { return _applicationID; }
            set
            {
                if (_applicationID != value)
                {
                    _applicationID = value;
                    OnPropertyChanged("ApplicationID");
                }
            }
        }
        private int _applicationID;
    
        [DataMember]
        public int PlacementID
        {
            get { return _placementID; }
            set
            {
                if (_placementID != value)
                {
                    _placementID = value;
                    OnPropertyChanged("PlacementID");
                }
            }
        }
        private int _placementID;
    
        [DataMember]
        public int LocationID
        {
            get { return _locationID; }
            set
            {
                if (_locationID != value)
                {
                    _locationID = value;
                    OnPropertyChanged("LocationID");
                }
            }
        }
        private int _locationID;
    
        [DataMember]
        public byte DeliveryChannelCode
        {
            get { return _deliveryChannelCode; }
            set
            {
                if (_deliveryChannelCode != value)
                {
                    _deliveryChannelCode = value;
                    OnPropertyChanged("DeliveryChannelCode");
                }
            }
        }
        private byte _deliveryChannelCode;
    
        [DataMember]
        public Nullable<byte> BrandCode
        {
            get { return _brandCode; }
            set
            {
                if (_brandCode != value)
                {
                    _brandCode = value;
                    OnPropertyChanged("BrandCode");
                }
            }
        }
        private Nullable<byte> _brandCode;
    
        [DataMember]
        public byte LanguageCode
        {
            get { return _languageCode; }
            set
            {
                if (_languageCode != value)
                {
                    ChangeTracker.RecordOriginalValue("LanguageCode", _languageCode);
                    if (!IsDeserializing)
                    {
                        if (MessageLanguage != null && MessageLanguage.LanguageCode != value)
                        {
                            MessageLanguage = null;
                        }
                    }
                    _languageCode = value;
                    OnPropertyChanged("LanguageCode");
                }
            }
        }
        private byte _languageCode;
    
        [DataMember]
        public byte RevisionNumber
        {
            get { return _revisionNumber; }
            set
            {
                if (_revisionNumber != value)
                {
                    _revisionNumber = value;
                    OnPropertyChanged("RevisionNumber");
                }
            }
        }
        private byte _revisionNumber;
    
        [DataMember]
        public Nullable<int> MessageBlockID
        {
            get { return _messageBlockID; }
            set
            {
                if (_messageBlockID != value)
                {
                    ChangeTracker.RecordOriginalValue("MessageBlockID", _messageBlockID);
                    if (!IsDeserializing)
                    {
                        if (MessageBlock != null && MessageBlock.MessageBlockID != value)
                        {
                            MessageBlock = null;
                        }
                    }
                    _messageBlockID = value;
                    OnPropertyChanged("MessageBlockID");
                }
            }
        }
        private Nullable<int> _messageBlockID;
    
        [DataMember]
        public byte DeploymentStatusCode
        {
            get { return _deploymentStatusCode; }
            set
            {
                if (_deploymentStatusCode != value)
                {
                    _deploymentStatusCode = value;
                    OnPropertyChanged("DeploymentStatusCode");
                }
            }
        }
        private byte _deploymentStatusCode;
    
        [DataMember]
        public System.DateTime StartDate
        {
            get { return _startDate; }
            set
            {
                if (_startDate != value)
                {
                    _startDate = value;
                    OnPropertyChanged("StartDate");
                }
            }
        }
        private System.DateTime _startDate;
    
        [DataMember]
        public System.DateTime EndDate
        {
            get { return _endDate; }
            set
            {
                if (_endDate != value)
                {
                    _endDate = value;
                    OnPropertyChanged("EndDate");
                }
            }
        }
        private System.DateTime _endDate;
    
        [DataMember]
        public int AudienceID
        {
            get { return _audienceID; }
            set
            {
                if (_audienceID != value)
                {
                    _audienceID = value;
                    OnPropertyChanged("AudienceID");
                }
            }
        }
        private int _audienceID;
    
        [DataMember]
        public int SegmentID
        {
            get { return _segmentID; }
            set
            {
                if (_segmentID != value)
                {
                    _segmentID = value;
                    OnPropertyChanged("SegmentID");
                }
            }
        }
        private int _segmentID;
    
        [DataMember]
        public int SplitID
        {
            get { return _splitID; }
            set
            {
                if (_splitID != value)
                {
                    _splitID = value;
                    OnPropertyChanged("SplitID");
                }
            }
        }
        private int _splitID;
    
        [DataMember]
        public System.DateTime DateAdded
        {
            get { return _dateAdded; }
            set
            {
                if (_dateAdded != value)
                {
                    _dateAdded = value;
                    OnPropertyChanged("DateAdded");
                }
            }
        }
        private System.DateTime _dateAdded;
    
        [DataMember]
        public System.DateTime DateUpdated
        {
            get { return _dateUpdated; }
            set
            {
                if (_dateUpdated != value)
                {
                    _dateUpdated = value;
                    OnPropertyChanged("DateUpdated");
                }
            }
        }
        private System.DateTime _dateUpdated;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public MessageBlock MessageBlock
        {
            get { return _messageBlock; }
            set
            {
                if (!ReferenceEquals(_messageBlock, value))
                {
                    var previousValue = _messageBlock;
                    _messageBlock = value;
                    FixupMessageBlock(previousValue);
                    OnNavigationPropertyChanged("MessageBlock");
                }
            }
        }
        private MessageBlock _messageBlock;
    
        [DataMember]
        public MessageLanguage MessageLanguage
        {
            get { return _messageLanguage; }
            set
            {
                if (!ReferenceEquals(_messageLanguage, value))
                {
                    var previousValue = _messageLanguage;
                    _messageLanguage = value;
                    FixupMessageLanguage(previousValue);
                    OnNavigationPropertyChanged("MessageLanguage");
                }
            }
        }
        private MessageLanguage _messageLanguage;
    
        [DataMember]
        public fbiOffer fbiOffer
        {
            get { return _fbiOffer; }
            set
            {
                if (!ReferenceEquals(_fbiOffer, value))
                {
                    var previousValue = _fbiOffer;
                    _fbiOffer = value;
                    FixupfbiOffer(previousValue);
                    OnNavigationPropertyChanged("fbiOffer");
                }
            }
        }
        private fbiOffer _fbiOffer;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            MessageBlock = null;
            MessageLanguage = null;
            fbiOffer = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupMessageBlock(MessageBlock previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.MessageInstances.Contains(this))
            {
                previousValue.MessageInstances.Remove(this);
            }
    
            if (MessageBlock != null)
            {
                if (!MessageBlock.MessageInstances.Contains(this))
                {
                    MessageBlock.MessageInstances.Add(this);
                }
    
                MessageBlockID = MessageBlock.MessageBlockID;
            }
            else if (!skipKeys)
            {
                MessageBlockID = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("MessageBlock")
                    && (ChangeTracker.OriginalValues["MessageBlock"] == MessageBlock))
                {
                    ChangeTracker.OriginalValues.Remove("MessageBlock");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("MessageBlock", previousValue);
                }
                if (MessageBlock != null && !MessageBlock.ChangeTracker.ChangeTrackingEnabled)
                {
                    MessageBlock.StartTracking();
                }
            }
        }
    
        private void FixupMessageLanguage(MessageLanguage previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.MessageInstances.Contains(this))
            {
                previousValue.MessageInstances.Remove(this);
            }
    
            if (MessageLanguage != null)
            {
                if (!MessageLanguage.MessageInstances.Contains(this))
                {
                    MessageLanguage.MessageInstances.Add(this);
                }
    
                LanguageCode = MessageLanguage.LanguageCode;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("MessageLanguage")
                    && (ChangeTracker.OriginalValues["MessageLanguage"] == MessageLanguage))
                {
                    ChangeTracker.OriginalValues.Remove("MessageLanguage");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("MessageLanguage", previousValue);
                }
                if (MessageLanguage != null && !MessageLanguage.ChangeTracker.ChangeTrackingEnabled)
                {
                    MessageLanguage.StartTracking();
                }
            }
        }
    
        private void FixupfbiOffer(fbiOffer previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.MessageInstances.Contains(this))
            {
                previousValue.MessageInstances.Remove(this);
            }
    
            if (fbiOffer != null)
            {
                if (!fbiOffer.MessageInstances.Contains(this))
                {
                    fbiOffer.MessageInstances.Add(this);
                }
    
                fbiOfferID = fbiOffer.fbiOfferID;
            }
            else if (!skipKeys)
            {
                fbiOfferID = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("fbiOffer")
                    && (ChangeTracker.OriginalValues["fbiOffer"] == fbiOffer))
                {
                    ChangeTracker.OriginalValues.Remove("fbiOffer");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("fbiOffer", previousValue);
                }
                if (fbiOffer != null && !fbiOffer.ChangeTracker.ChangeTrackingEnabled)
                {
                    fbiOffer.StartTracking();
                }
            }
        }

        #endregion
    }
}
