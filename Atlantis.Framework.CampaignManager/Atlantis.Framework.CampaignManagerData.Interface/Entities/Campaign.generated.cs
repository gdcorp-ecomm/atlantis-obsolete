//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
using Atlantis.Framework.Entity.Interface;
using Atlantis.Framework.Entity.Interface.SelfTracking;

namespace Atlantis.Framework.CampaignManagerData.Interface.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Audience))]
    [KnownType(typeof(CampaignStatusType))]
    [KnownType(typeof(CampaignType))]
    [KnownType(typeof(OfferType))]
    [KnownType(typeof(CampaignAudienceTypeMap))]
    [KnownType(typeof(CampaignCompanyMap))]
    [KnownType(typeof(CampaignMessage))]
    [KnownType(typeof(CampaignObjectiveMap))]
    [KnownType(typeof(CampaignProductMap))]
    [KnownType(typeof(CampaignUserResourceMap))]
    [KnownType(typeof(UserResource))]
    public partial class Campaign:  IAtlantisEntity, IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int CampaignID
        {
            get { return _campaignID; }
            set
            {
                if (_campaignID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'CampaignID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _campaignID = value;
                    OnPropertyChanged("CampaignID");
                }
            }
        }
        private int _campaignID;
    
        [DataMember]
        public string Key
        {
            get { return _key; }
            set
            {
                if (_key != value)
                {
                    _key = value;
                    OnPropertyChanged("Key");
                }
            }
        }
        private string _key;
    
        [DataMember]
        public byte CampaignTypeID
        {
            get { return _campaignTypeID; }
            set
            {
                if (_campaignTypeID != value)
                {
                    ChangeTracker.RecordOriginalValue("CampaignTypeID", _campaignTypeID);
                    if (!IsDeserializing)
                    {
                        if (CampaignType != null && CampaignType.CampaignTypeID != value)
                        {
                            CampaignType = null;
                        }
                    }
                    _campaignTypeID = value;
                    OnPropertyChanged("CampaignTypeID");
                }
            }
        }
        private byte _campaignTypeID;
    
        [DataMember]
        public int CampaignStatusTypeID
        {
            get { return _campaignStatusTypeID; }
            set
            {
                if (_campaignStatusTypeID != value)
                {
                    ChangeTracker.RecordOriginalValue("CampaignStatusTypeID", _campaignStatusTypeID);
                    if (!IsDeserializing)
                    {
                        if (CampaignStatusType != null && CampaignStatusType.CampaignStatusTypeID != value)
                        {
                            CampaignStatusType = null;
                        }
                    }
                    _campaignStatusTypeID = value;
                    OnPropertyChanged("CampaignStatusTypeID");
                }
            }
        }
        private int _campaignStatusTypeID;
    
        [DataMember]
        public byte OfferTypeID
        {
            get { return _offerTypeID; }
            set
            {
                if (_offerTypeID != value)
                {
                    ChangeTracker.RecordOriginalValue("OfferTypeID", _offerTypeID);
                    if (!IsDeserializing)
                    {
                        if (OfferType != null && OfferType.OfferTypeID != value)
                        {
                            OfferType = null;
                        }
                    }
                    _offerTypeID = value;
                    OnPropertyChanged("OfferTypeID");
                }
            }
        }
        private byte _offerTypeID;
    
        [DataMember]
        public int OwnerID
        {
            get { return _ownerID; }
            set
            {
                if (_ownerID != value)
                {
                    ChangeTracker.RecordOriginalValue("OwnerID", _ownerID);
                    if (!IsDeserializing)
                    {
                        if (Owner != null && Owner.UserResourceID != value)
                        {
                            Owner = null;
                        }
                    }
                    _ownerID = value;
                    OnPropertyChanged("OwnerID");
                }
            }
        }
        private int _ownerID;
    
        [DataMember]
        public string OfferDescription
        {
            get { return _offerDescription; }
            set
            {
                if (_offerDescription != value)
                {
                    _offerDescription = value;
                    OnPropertyChanged("OfferDescription");
                }
            }
        }
        private string _offerDescription;
    
        [DataMember]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public string Description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    _description = value;
                    OnPropertyChanged("Description");
                }
            }
        }
        private string _description;
    
        [DataMember]
        public Nullable<decimal> Cost
        {
            get { return _cost; }
            set
            {
                if (_cost != value)
                {
                    _cost = value;
                    OnPropertyChanged("Cost");
                }
            }
        }
        private Nullable<decimal> _cost;
    
        [DataMember]
        public Nullable<System.DateTime> TargetDate
        {
            get { return _targetDate; }
            set
            {
                if (_targetDate != value)
                {
                    _targetDate = value;
                    OnPropertyChanged("TargetDate");
                }
            }
        }
        private Nullable<System.DateTime> _targetDate;
    
        [DataMember]
        public Nullable<System.DateTime> EndDate
        {
            get { return _endDate; }
            set
            {
                if (_endDate != value)
                {
                    _endDate = value;
                    OnPropertyChanged("EndDate");
                }
            }
        }
        private Nullable<System.DateTime> _endDate;
    
        [DataMember]
        public string MercuryIDList
        {
            get { return _mercuryIDList; }
            set
            {
                if (_mercuryIDList != value)
                {
                    _mercuryIDList = value;
                    OnPropertyChanged("MercuryIDList");
                }
            }
        }
        private string _mercuryIDList;
    
        [DataMember]
        public bool Disabled
        {
            get { return _disabled; }
            set
            {
                if (_disabled != value)
                {
                    _disabled = value;
                    OnPropertyChanged("Disabled");
                }
            }
        }
        private bool _disabled;
    
        [DataMember]
        public System.DateTime DateAdded
        {
            get { return _dateAdded; }
            set
            {
                if (_dateAdded != value)
                {
                    _dateAdded = value;
                    OnPropertyChanged("DateAdded");
                }
            }
        }
        private System.DateTime _dateAdded;
    
        [DataMember]
        public System.DateTime DateUpdated
        {
            get { return _dateUpdated; }
            set
            {
                if (_dateUpdated != value)
                {
                    _dateUpdated = value;
                    OnPropertyChanged("DateUpdated");
                }
            }
        }
        private System.DateTime _dateUpdated;
    
        [DataMember]
        public string Priority
        {
            get { return _priority; }
            set
            {
                if (_priority != value)
                {
                    _priority = value;
                    OnPropertyChanged("Priority");
                }
            }
        }
        private string _priority;
    
        [DataMember]
        public Nullable<byte> PriorityScore
        {
            get { return _priorityScore; }
            set
            {
                if (_priorityScore != value)
                {
                    _priorityScore = value;
                    OnPropertyChanged("PriorityScore");
                }
            }
        }
        private Nullable<byte> _priorityScore;
    
        [DataMember]
        public Nullable<bool> AddToCygnus
        {
            get { return _addToCygnus; }
            set
            {
                if (_addToCygnus != value)
                {
                    _addToCygnus = value;
                    OnPropertyChanged("AddToCygnus");
                }
            }
        }
        private Nullable<bool> _addToCygnus;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<Audience> Audiences
        {
            get
            {
                if (_audiences == null)
                {
                    _audiences = new TrackableCollection<Audience>();
                    _audiences.CollectionChanged += FixupAudiences;
                }
                return _audiences;
            }
            set
            {
                if (!ReferenceEquals(_audiences, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_audiences != null)
                    {
                        _audiences.CollectionChanged -= FixupAudiences;
                    }
                    _audiences = value;
                    if (_audiences != null)
                    {
                        _audiences.CollectionChanged += FixupAudiences;
                    }
                    OnNavigationPropertyChanged("Audiences");
                }
            }
        }
        private TrackableCollection<Audience> _audiences;
    
        [DataMember]
        public CampaignStatusType CampaignStatusType
        {
            get { return _campaignStatusType; }
            set
            {
                if (!ReferenceEquals(_campaignStatusType, value))
                {
                    var previousValue = _campaignStatusType;
                    _campaignStatusType = value;
                    FixupCampaignStatusType(previousValue);
                    OnNavigationPropertyChanged("CampaignStatusType");
                }
            }
        }
        private CampaignStatusType _campaignStatusType;
    
        [DataMember]
        public CampaignType CampaignType
        {
            get { return _campaignType; }
            set
            {
                if (!ReferenceEquals(_campaignType, value))
                {
                    var previousValue = _campaignType;
                    _campaignType = value;
                    FixupCampaignType(previousValue);
                    OnNavigationPropertyChanged("CampaignType");
                }
            }
        }
        private CampaignType _campaignType;
    
        [DataMember]
        public OfferType OfferType
        {
            get { return _offerType; }
            set
            {
                if (!ReferenceEquals(_offerType, value))
                {
                    var previousValue = _offerType;
                    _offerType = value;
                    FixupOfferType(previousValue);
                    OnNavigationPropertyChanged("OfferType");
                }
            }
        }
        private OfferType _offerType;
    
        [DataMember]
        public TrackableCollection<CampaignAudienceTypeMap> CampaignAudienceTypeMaps
        {
            get
            {
                if (_campaignAudienceTypeMaps == null)
                {
                    _campaignAudienceTypeMaps = new TrackableCollection<CampaignAudienceTypeMap>();
                    _campaignAudienceTypeMaps.CollectionChanged += FixupCampaignAudienceTypeMaps;
                }
                return _campaignAudienceTypeMaps;
            }
            set
            {
                if (!ReferenceEquals(_campaignAudienceTypeMaps, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_campaignAudienceTypeMaps != null)
                    {
                        _campaignAudienceTypeMaps.CollectionChanged -= FixupCampaignAudienceTypeMaps;
                    }
                    _campaignAudienceTypeMaps = value;
                    if (_campaignAudienceTypeMaps != null)
                    {
                        _campaignAudienceTypeMaps.CollectionChanged += FixupCampaignAudienceTypeMaps;
                    }
                    OnNavigationPropertyChanged("CampaignAudienceTypeMaps");
                }
            }
        }
        private TrackableCollection<CampaignAudienceTypeMap> _campaignAudienceTypeMaps;
    
        [DataMember]
        public TrackableCollection<CampaignCompanyMap> CampaignCompanyMaps
        {
            get
            {
                if (_campaignCompanyMaps == null)
                {
                    _campaignCompanyMaps = new TrackableCollection<CampaignCompanyMap>();
                    _campaignCompanyMaps.CollectionChanged += FixupCampaignCompanyMaps;
                }
                return _campaignCompanyMaps;
            }
            set
            {
                if (!ReferenceEquals(_campaignCompanyMaps, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_campaignCompanyMaps != null)
                    {
                        _campaignCompanyMaps.CollectionChanged -= FixupCampaignCompanyMaps;
                    }
                    _campaignCompanyMaps = value;
                    if (_campaignCompanyMaps != null)
                    {
                        _campaignCompanyMaps.CollectionChanged += FixupCampaignCompanyMaps;
                    }
                    OnNavigationPropertyChanged("CampaignCompanyMaps");
                }
            }
        }
        private TrackableCollection<CampaignCompanyMap> _campaignCompanyMaps;
    
        [DataMember]
        public TrackableCollection<CampaignMessage> CampaignMessages
        {
            get
            {
                if (_campaignMessages == null)
                {
                    _campaignMessages = new TrackableCollection<CampaignMessage>();
                    _campaignMessages.CollectionChanged += FixupCampaignMessages;
                }
                return _campaignMessages;
            }
            set
            {
                if (!ReferenceEquals(_campaignMessages, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_campaignMessages != null)
                    {
                        _campaignMessages.CollectionChanged -= FixupCampaignMessages;
                    }
                    _campaignMessages = value;
                    if (_campaignMessages != null)
                    {
                        _campaignMessages.CollectionChanged += FixupCampaignMessages;
                    }
                    OnNavigationPropertyChanged("CampaignMessages");
                }
            }
        }
        private TrackableCollection<CampaignMessage> _campaignMessages;
    
        [DataMember]
        public TrackableCollection<CampaignObjectiveMap> CampaignObjectiveMaps
        {
            get
            {
                if (_campaignObjectiveMaps == null)
                {
                    _campaignObjectiveMaps = new TrackableCollection<CampaignObjectiveMap>();
                    _campaignObjectiveMaps.CollectionChanged += FixupCampaignObjectiveMaps;
                }
                return _campaignObjectiveMaps;
            }
            set
            {
                if (!ReferenceEquals(_campaignObjectiveMaps, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_campaignObjectiveMaps != null)
                    {
                        _campaignObjectiveMaps.CollectionChanged -= FixupCampaignObjectiveMaps;
                    }
                    _campaignObjectiveMaps = value;
                    if (_campaignObjectiveMaps != null)
                    {
                        _campaignObjectiveMaps.CollectionChanged += FixupCampaignObjectiveMaps;
                    }
                    OnNavigationPropertyChanged("CampaignObjectiveMaps");
                }
            }
        }
        private TrackableCollection<CampaignObjectiveMap> _campaignObjectiveMaps;
    
        [DataMember]
        public TrackableCollection<CampaignProductMap> CampaignProductMaps
        {
            get
            {
                if (_campaignProductMaps == null)
                {
                    _campaignProductMaps = new TrackableCollection<CampaignProductMap>();
                    _campaignProductMaps.CollectionChanged += FixupCampaignProductMaps;
                }
                return _campaignProductMaps;
            }
            set
            {
                if (!ReferenceEquals(_campaignProductMaps, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_campaignProductMaps != null)
                    {
                        _campaignProductMaps.CollectionChanged -= FixupCampaignProductMaps;
                    }
                    _campaignProductMaps = value;
                    if (_campaignProductMaps != null)
                    {
                        _campaignProductMaps.CollectionChanged += FixupCampaignProductMaps;
                    }
                    OnNavigationPropertyChanged("CampaignProductMaps");
                }
            }
        }
        private TrackableCollection<CampaignProductMap> _campaignProductMaps;
    
        [DataMember]
        public TrackableCollection<CampaignUserResourceMap> CampaignUserResourceMaps
        {
            get
            {
                if (_campaignUserResourceMaps == null)
                {
                    _campaignUserResourceMaps = new TrackableCollection<CampaignUserResourceMap>();
                    _campaignUserResourceMaps.CollectionChanged += FixupCampaignUserResourceMaps;
                }
                return _campaignUserResourceMaps;
            }
            set
            {
                if (!ReferenceEquals(_campaignUserResourceMaps, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_campaignUserResourceMaps != null)
                    {
                        _campaignUserResourceMaps.CollectionChanged -= FixupCampaignUserResourceMaps;
                    }
                    _campaignUserResourceMaps = value;
                    if (_campaignUserResourceMaps != null)
                    {
                        _campaignUserResourceMaps.CollectionChanged += FixupCampaignUserResourceMaps;
                    }
                    OnNavigationPropertyChanged("CampaignUserResourceMaps");
                }
            }
        }
        private TrackableCollection<CampaignUserResourceMap> _campaignUserResourceMaps;
    
        [DataMember]
        public UserResource Owner
        {
            get { return _owner; }
            set
            {
                if (!ReferenceEquals(_owner, value))
                {
                    var previousValue = _owner;
                    _owner = value;
                    FixupOwner(previousValue);
                    OnNavigationPropertyChanged("Owner");
                }
            }
        }
        private UserResource _owner;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Audiences.Clear();
            CampaignStatusType = null;
            CampaignType = null;
            OfferType = null;
            CampaignAudienceTypeMaps.Clear();
            CampaignCompanyMaps.Clear();
            CampaignMessages.Clear();
            CampaignObjectiveMaps.Clear();
            CampaignProductMaps.Clear();
            CampaignUserResourceMaps.Clear();
            Owner = null;
        }

        #endregion
        #region Association Fixup
    
        private void FixupCampaignStatusType(CampaignStatusType previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Campaigns.Contains(this))
            {
                previousValue.Campaigns.Remove(this);
            }
    
            if (CampaignStatusType != null)
            {
                if (!CampaignStatusType.Campaigns.Contains(this))
                {
                    CampaignStatusType.Campaigns.Add(this);
                }
    
                CampaignStatusTypeID = CampaignStatusType.CampaignStatusTypeID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("CampaignStatusType")
                    && (ChangeTracker.OriginalValues["CampaignStatusType"] == CampaignStatusType))
                {
                    ChangeTracker.OriginalValues.Remove("CampaignStatusType");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("CampaignStatusType", previousValue);
                }
                if (CampaignStatusType != null && !CampaignStatusType.ChangeTracker.ChangeTrackingEnabled)
                {
                    CampaignStatusType.StartTracking();
                }
            }
        }
    
        private void FixupCampaignType(CampaignType previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Campaigns.Contains(this))
            {
                previousValue.Campaigns.Remove(this);
            }
    
            if (CampaignType != null)
            {
                if (!CampaignType.Campaigns.Contains(this))
                {
                    CampaignType.Campaigns.Add(this);
                }
    
                CampaignTypeID = CampaignType.CampaignTypeID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("CampaignType")
                    && (ChangeTracker.OriginalValues["CampaignType"] == CampaignType))
                {
                    ChangeTracker.OriginalValues.Remove("CampaignType");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("CampaignType", previousValue);
                }
                if (CampaignType != null && !CampaignType.ChangeTracker.ChangeTrackingEnabled)
                {
                    CampaignType.StartTracking();
                }
            }
        }
    
        private void FixupOfferType(OfferType previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Campaigns.Contains(this))
            {
                previousValue.Campaigns.Remove(this);
            }
    
            if (OfferType != null)
            {
                if (!OfferType.Campaigns.Contains(this))
                {
                    OfferType.Campaigns.Add(this);
                }
    
                OfferTypeID = OfferType.OfferTypeID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("OfferType")
                    && (ChangeTracker.OriginalValues["OfferType"] == OfferType))
                {
                    ChangeTracker.OriginalValues.Remove("OfferType");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("OfferType", previousValue);
                }
                if (OfferType != null && !OfferType.ChangeTracker.ChangeTrackingEnabled)
                {
                    OfferType.StartTracking();
                }
            }
        }
    
        private void FixupOwner(UserResource previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Campaigns.Contains(this))
            {
                previousValue.Campaigns.Remove(this);
            }
    
            if (Owner != null)
            {
                if (!Owner.Campaigns.Contains(this))
                {
                    Owner.Campaigns.Add(this);
                }
    
                OwnerID = Owner.UserResourceID;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Owner")
                    && (ChangeTracker.OriginalValues["Owner"] == Owner))
                {
                    ChangeTracker.OriginalValues.Remove("Owner");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Owner", previousValue);
                }
                if (Owner != null && !Owner.ChangeTracker.ChangeTrackingEnabled)
                {
                    Owner.StartTracking();
                }
            }
        }
    
        private void FixupAudiences(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Audience item in e.NewItems)
                {
                    item.Campaign = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Audiences", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Audience item in e.OldItems)
                {
                    if (ReferenceEquals(item.Campaign, this))
                    {
                        item.Campaign = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Audiences", item);
                    }
                }
            }
        }
    
        private void FixupCampaignAudienceTypeMaps(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (CampaignAudienceTypeMap item in e.NewItems)
                {
                    item.Campaign = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("CampaignAudienceTypeMaps", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CampaignAudienceTypeMap item in e.OldItems)
                {
                    if (ReferenceEquals(item.Campaign, this))
                    {
                        item.Campaign = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("CampaignAudienceTypeMaps", item);
                    }
                }
            }
        }
    
        private void FixupCampaignCompanyMaps(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (CampaignCompanyMap item in e.NewItems)
                {
                    item.Campaign = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("CampaignCompanyMaps", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CampaignCompanyMap item in e.OldItems)
                {
                    if (ReferenceEquals(item.Campaign, this))
                    {
                        item.Campaign = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("CampaignCompanyMaps", item);
                    }
                }
            }
        }
    
        private void FixupCampaignMessages(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (CampaignMessage item in e.NewItems)
                {
                    item.Campaign = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("CampaignMessages", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CampaignMessage item in e.OldItems)
                {
                    if (ReferenceEquals(item.Campaign, this))
                    {
                        item.Campaign = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("CampaignMessages", item);
                    }
                }
            }
        }
    
        private void FixupCampaignObjectiveMaps(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (CampaignObjectiveMap item in e.NewItems)
                {
                    item.Campaign = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("CampaignObjectiveMaps", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CampaignObjectiveMap item in e.OldItems)
                {
                    if (ReferenceEquals(item.Campaign, this))
                    {
                        item.Campaign = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("CampaignObjectiveMaps", item);
                    }
                }
            }
        }
    
        private void FixupCampaignProductMaps(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (CampaignProductMap item in e.NewItems)
                {
                    item.Campaign = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("CampaignProductMaps", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CampaignProductMap item in e.OldItems)
                {
                    if (ReferenceEquals(item.Campaign, this))
                    {
                        item.Campaign = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("CampaignProductMaps", item);
                    }
                }
            }
        }
    
        private void FixupCampaignUserResourceMaps(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (CampaignUserResourceMap item in e.NewItems)
                {
                    item.Campaign = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("CampaignUserResourceMaps", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CampaignUserResourceMap item in e.OldItems)
                {
                    if (ReferenceEquals(item.Campaign, this))
                    {
                        item.Campaign = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("CampaignUserResourceMaps", item);
                    }
                }
            }
        }

        #endregion
    }
}
