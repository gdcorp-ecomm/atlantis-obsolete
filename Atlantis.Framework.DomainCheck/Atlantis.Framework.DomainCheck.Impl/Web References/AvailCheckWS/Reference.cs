//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18052
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.18052.
// 
#pragma warning disable 1591

namespace Atlantis.Framework.DomainCheck.Impl.AvailCheckWS {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="AvailCheckWebSvcClassSoap", Namespace="http://tempuri.org/")]
    public partial class AvailCheckWebSvcClass : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback FindCheckOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckOperationCompleted;
        
        private System.Threading.SendOrPostCallback DomainSyntaxCheckOperationCompleted;
        
        private System.Threading.SendOrPostCallback HostCreateCheckOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExclusionCheckOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddExclusionOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveExclusionOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddBulkExclusionOperationCompleted;
        
        private System.Threading.SendOrPostCallback RefreshTldsOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public AvailCheckWebSvcClass() {
            this.Url = global::Atlantis.Framework.DomainCheck.Impl.Properties.Settings.Default.Atlantis_Framework_DomainCheck_Impl_AvailCheckWS_AvailCheckWebSvc;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event FindCheckCompletedEventHandler FindCheckCompleted;
        
        /// <remarks/>
        public event CheckCompletedEventHandler CheckCompleted;
        
        /// <remarks/>
        public event DomainSyntaxCheckCompletedEventHandler DomainSyntaxCheckCompleted;
        
        /// <remarks/>
        public event HostCreateCheckCompletedEventHandler HostCreateCheckCompleted;
        
        /// <remarks/>
        public event ExclusionCheckCompletedEventHandler ExclusionCheckCompleted;
        
        /// <remarks/>
        public event AddExclusionCompletedEventHandler AddExclusionCompleted;
        
        /// <remarks/>
        public event RemoveExclusionCompletedEventHandler RemoveExclusionCompleted;
        
        /// <remarks/>
        public event AddBulkExclusionCompletedEventHandler AddBulkExclusionCompleted;
        
        /// <remarks/>
        public event RefreshTldsCompletedEventHandler RefreshTldsCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FindCheck", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string FindCheck(string sCheckXML) {
            object[] results = this.Invoke("FindCheck", new object[] {
                        sCheckXML});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginFindCheck(string sCheckXML, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("FindCheck", new object[] {
                        sCheckXML}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndFindCheck(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void FindCheckAsync(string sCheckXML) {
            this.FindCheckAsync(sCheckXML, null);
        }
        
        /// <remarks/>
        public void FindCheckAsync(string sCheckXML, object userState) {
            if ((this.FindCheckOperationCompleted == null)) {
                this.FindCheckOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFindCheckOperationCompleted);
            }
            this.InvokeAsync("FindCheck", new object[] {
                        sCheckXML}, this.FindCheckOperationCompleted, userState);
        }
        
        private void OnFindCheckOperationCompleted(object arg) {
            if ((this.FindCheckCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FindCheckCompleted(this, new FindCheckCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Check", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Check(string sCheckXML) {
            object[] results = this.Invoke("Check", new object[] {
                        sCheckXML});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCheck(string sCheckXML, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Check", new object[] {
                        sCheckXML}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndCheck(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CheckAsync(string sCheckXML) {
            this.CheckAsync(sCheckXML, null);
        }
        
        /// <remarks/>
        public void CheckAsync(string sCheckXML, object userState) {
            if ((this.CheckOperationCompleted == null)) {
                this.CheckOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckOperationCompleted);
            }
            this.InvokeAsync("Check", new object[] {
                        sCheckXML}, this.CheckOperationCompleted, userState);
        }
        
        private void OnCheckOperationCompleted(object arg) {
            if ((this.CheckCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckCompleted(this, new CheckCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DomainSyntaxCheck", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DomainSyntaxCheck(string sCheckXML) {
            object[] results = this.Invoke("DomainSyntaxCheck", new object[] {
                        sCheckXML});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDomainSyntaxCheck(string sCheckXML, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DomainSyntaxCheck", new object[] {
                        sCheckXML}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndDomainSyntaxCheck(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DomainSyntaxCheckAsync(string sCheckXML) {
            this.DomainSyntaxCheckAsync(sCheckXML, null);
        }
        
        /// <remarks/>
        public void DomainSyntaxCheckAsync(string sCheckXML, object userState) {
            if ((this.DomainSyntaxCheckOperationCompleted == null)) {
                this.DomainSyntaxCheckOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDomainSyntaxCheckOperationCompleted);
            }
            this.InvokeAsync("DomainSyntaxCheck", new object[] {
                        sCheckXML}, this.DomainSyntaxCheckOperationCompleted, userState);
        }
        
        private void OnDomainSyntaxCheckOperationCompleted(object arg) {
            if ((this.DomainSyntaxCheckCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DomainSyntaxCheckCompleted(this, new DomainSyntaxCheckCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/HostCreateCheck", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string HostCreateCheck(string sCheckXML) {
            object[] results = this.Invoke("HostCreateCheck", new object[] {
                        sCheckXML});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginHostCreateCheck(string sCheckXML, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("HostCreateCheck", new object[] {
                        sCheckXML}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndHostCreateCheck(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void HostCreateCheckAsync(string sCheckXML) {
            this.HostCreateCheckAsync(sCheckXML, null);
        }
        
        /// <remarks/>
        public void HostCreateCheckAsync(string sCheckXML, object userState) {
            if ((this.HostCreateCheckOperationCompleted == null)) {
                this.HostCreateCheckOperationCompleted = new System.Threading.SendOrPostCallback(this.OnHostCreateCheckOperationCompleted);
            }
            this.InvokeAsync("HostCreateCheck", new object[] {
                        sCheckXML}, this.HostCreateCheckOperationCompleted, userState);
        }
        
        private void OnHostCreateCheckOperationCompleted(object arg) {
            if ((this.HostCreateCheckCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.HostCreateCheckCompleted(this, new HostCreateCheckCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ExclusionCheck", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ExclusionCheck(string sCheckXML) {
            object[] results = this.Invoke("ExclusionCheck", new object[] {
                        sCheckXML});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginExclusionCheck(string sCheckXML, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ExclusionCheck", new object[] {
                        sCheckXML}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndExclusionCheck(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ExclusionCheckAsync(string sCheckXML) {
            this.ExclusionCheckAsync(sCheckXML, null);
        }
        
        /// <remarks/>
        public void ExclusionCheckAsync(string sCheckXML, object userState) {
            if ((this.ExclusionCheckOperationCompleted == null)) {
                this.ExclusionCheckOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExclusionCheckOperationCompleted);
            }
            this.InvokeAsync("ExclusionCheck", new object[] {
                        sCheckXML}, this.ExclusionCheckOperationCompleted, userState);
        }
        
        private void OnExclusionCheckOperationCompleted(object arg) {
            if ((this.ExclusionCheckCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExclusionCheckCompleted(this, new ExclusionCheckCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddExclusion", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AddExclusion(string strDomainName, int iPLID, int iInternalRegistrarId, string strPhase) {
            object[] results = this.Invoke("AddExclusion", new object[] {
                        strDomainName,
                        iPLID,
                        iInternalRegistrarId,
                        strPhase});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddExclusion(string strDomainName, int iPLID, int iInternalRegistrarId, string strPhase, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddExclusion", new object[] {
                        strDomainName,
                        iPLID,
                        iInternalRegistrarId,
                        strPhase}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndAddExclusion(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AddExclusionAsync(string strDomainName, int iPLID, int iInternalRegistrarId, string strPhase) {
            this.AddExclusionAsync(strDomainName, iPLID, iInternalRegistrarId, strPhase, null);
        }
        
        /// <remarks/>
        public void AddExclusionAsync(string strDomainName, int iPLID, int iInternalRegistrarId, string strPhase, object userState) {
            if ((this.AddExclusionOperationCompleted == null)) {
                this.AddExclusionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddExclusionOperationCompleted);
            }
            this.InvokeAsync("AddExclusion", new object[] {
                        strDomainName,
                        iPLID,
                        iInternalRegistrarId,
                        strPhase}, this.AddExclusionOperationCompleted, userState);
        }
        
        private void OnAddExclusionOperationCompleted(object arg) {
            if ((this.AddExclusionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddExclusionCompleted(this, new AddExclusionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RemoveExclusion", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string RemoveExclusion(string strDomainName, int iPLID, int iInternalRegistrarId, string strPhase) {
            object[] results = this.Invoke("RemoveExclusion", new object[] {
                        strDomainName,
                        iPLID,
                        iInternalRegistrarId,
                        strPhase});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRemoveExclusion(string strDomainName, int iPLID, int iInternalRegistrarId, string strPhase, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RemoveExclusion", new object[] {
                        strDomainName,
                        iPLID,
                        iInternalRegistrarId,
                        strPhase}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndRemoveExclusion(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RemoveExclusionAsync(string strDomainName, int iPLID, int iInternalRegistrarId, string strPhase) {
            this.RemoveExclusionAsync(strDomainName, iPLID, iInternalRegistrarId, strPhase, null);
        }
        
        /// <remarks/>
        public void RemoveExclusionAsync(string strDomainName, int iPLID, int iInternalRegistrarId, string strPhase, object userState) {
            if ((this.RemoveExclusionOperationCompleted == null)) {
                this.RemoveExclusionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveExclusionOperationCompleted);
            }
            this.InvokeAsync("RemoveExclusion", new object[] {
                        strDomainName,
                        iPLID,
                        iInternalRegistrarId,
                        strPhase}, this.RemoveExclusionOperationCompleted, userState);
        }
        
        private void OnRemoveExclusionOperationCompleted(object arg) {
            if ((this.RemoveExclusionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveExclusionCompleted(this, new RemoveExclusionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddBulkExclusion", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AddBulkExclusion() {
            object[] results = this.Invoke("AddBulkExclusion", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddBulkExclusion(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddBulkExclusion", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public string EndAddBulkExclusion(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AddBulkExclusionAsync() {
            this.AddBulkExclusionAsync(null);
        }
        
        /// <remarks/>
        public void AddBulkExclusionAsync(object userState) {
            if ((this.AddBulkExclusionOperationCompleted == null)) {
                this.AddBulkExclusionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddBulkExclusionOperationCompleted);
            }
            this.InvokeAsync("AddBulkExclusion", new object[0], this.AddBulkExclusionOperationCompleted, userState);
        }
        
        private void OnAddBulkExclusionOperationCompleted(object arg) {
            if ((this.AddBulkExclusionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddBulkExclusionCompleted(this, new AddBulkExclusionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RefreshTlds", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string RefreshTlds() {
            object[] results = this.Invoke("RefreshTlds", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRefreshTlds(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RefreshTlds", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public string EndRefreshTlds(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RefreshTldsAsync() {
            this.RefreshTldsAsync(null);
        }
        
        /// <remarks/>
        public void RefreshTldsAsync(object userState) {
            if ((this.RefreshTldsOperationCompleted == null)) {
                this.RefreshTldsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRefreshTldsOperationCompleted);
            }
            this.InvokeAsync("RefreshTlds", new object[0], this.RefreshTldsOperationCompleted, userState);
        }
        
        private void OnRefreshTldsOperationCompleted(object arg) {
            if ((this.RefreshTldsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RefreshTldsCompleted(this, new RefreshTldsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void FindCheckCompletedEventHandler(object sender, FindCheckCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FindCheckCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FindCheckCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void CheckCompletedEventHandler(object sender, CheckCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void DomainSyntaxCheckCompletedEventHandler(object sender, DomainSyntaxCheckCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DomainSyntaxCheckCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DomainSyntaxCheckCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void HostCreateCheckCompletedEventHandler(object sender, HostCreateCheckCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HostCreateCheckCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal HostCreateCheckCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void ExclusionCheckCompletedEventHandler(object sender, ExclusionCheckCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExclusionCheckCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExclusionCheckCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void AddExclusionCompletedEventHandler(object sender, AddExclusionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddExclusionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddExclusionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void RemoveExclusionCompletedEventHandler(object sender, RemoveExclusionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoveExclusionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoveExclusionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void AddBulkExclusionCompletedEventHandler(object sender, AddBulkExclusionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddBulkExclusionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddBulkExclusionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void RefreshTldsCompletedEventHandler(object sender, RefreshTldsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RefreshTldsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RefreshTldsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591